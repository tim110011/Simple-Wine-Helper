#!/bin/bash
set -e

SWH_LAUNCHER_VERSION=2.8.0
{ command -v swh >/dev/null; } || { printf "ERROR: swh is not installed or is not executable.\nIt is suggested place swh in %s/bin and add\n  PATH=\$PATH:%s/bin\n  PATH\nto your .bashrc file.\n" "$PWD" "$HOME"; exit 1; }

## Example Application: notepad
# your app's special walkaround

prefix='example'							# give a unique name to your wineprefix
build='4.7-staging'							# this is the dir name in cellar, provided by winehq or your own build.
install='/opt/wine-staging'					# { '/opt/wine-stable' ; '/opt/wine-devel' ; '/opt/wine-staging' } winehq must be installed in /opt to be supported by swh s command: copy winehq from /opt to $cellar. For your own build, copy it into $cellar
build_arch=win64							# { win32 ; win64 } arch of your installed/built wine pagkage. when set to win64, you can create 32bit prefix by set WINEARCH=win32
export WINEARCH=win64						# { win32 ; win64 } arch of your wineprefix. must export this variable
export WINEDEBUG=fixme-all,+tid 			# set WINEDEBUG channels here will override swh default settings
export WINEDLLOVERRIDES="winemenubuilder.exe="

#invoker='strace'										# { primusrun ; perf recored ; strace } comment this line out if not debugging
#invoker_args_str='-e trace=open,openat'				# all arguments in this string

runner=wine											# { wine ; wine64 ; winedbg } default: wine
use_wine64=true 									# { true ; false } default: true . if exe is 64bit, use wine64 . need: build_arch=win64 ; WINEARCH=wine64
#runas_str='runas /trustlevel:0x20000' 				# This feature is not supported yet. full command line in this string. experimental wine-staging feature. https://bugs.winehq.org/show_bug.cgi?id=40613

#LC_ALL=zh_CN.utf8									# for non-unicode program, see 'locale -a' command

## Staging Setting
#export WINEESYNC=1

## DXVK setting (need native d3dcompiler_47.dll ? https://github.com/doitsujin/dxvk/issues/875#issuecomment-456768012)
dxvk_install="$HOME/0_wine/dxvk/dxvk-latest"						# extracted DXVK release archive dir, support version 0.5x-1.0 . swh 2.7.2 use `ln -s` method install 3rd party package. Choose your desired version: `ln -s dxvk-1.0 dxvk-yourchoice`
#DXVK_HUD=1

#DXVK_CONFIG_FILE="$HOME/0_wine/DXVK_CONFIG/$prefix/dxvk.conf" 			# application configuration file, write these files yourself, see dxvk wiki
#DXVK_CONFIG_FILE="$HOME/0_wine/DXVK_CONFIG/amd/dxvk.conf" 				# tell dxvk you are using amd gpu
#DXVK_CONFIG_FILE="$HOME/0_wine/DXVK_CONFIG/nv/dxvk.conf" 				# tell dxvk you are using nvidia gpu
#export WINEDLLOVERRIDES="nvapi.dll,nvapi64.dll=d"

## FAudio setting
faudio_install="$HOME/0_wine/faudio/faudio-latest"				# extract FAudio release archive dir, build yourself or download https://github.com/Kron4ek/FAudio-Builds/releases . same install method as dxvk

## Walkaround
#XMODIFIERS='' 													# Unity Game Keyboard issue walkaround  https://www.gamingonlinux.com/articles/if-you-have-trouble-with-keyboard-input-in-some-unity-games-there-is-a-workaround.12411

#   1. valid subscript range [1-99] 
#   2. assign array members contiguously
#   3. if command have arguements, write all arguments in string args[i]

exe[1]='C:\windows\notepad.exe'
#args[1]=''

#exe[2]=''
#args[2]=''

#exe[3]=''
#args[3]=''

#exe[4]=''
#args[4]=''

SWH_LAUNCHER="$0"
source swh "$@"
