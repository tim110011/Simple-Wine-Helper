#!/bin/sh

SWH_VER="1.4.6"

# This is a UTF-8 file
# You should see an o with two dots over it here [ö]
# You should see a micro (u with a tail) here [µ]
# You should see a trademark symbol here [™]

#    Simple Wine Helper (SWH)
#
#    Command-line interface wrapper for wine
#
#        Manage wine binary reopsitory
#        Manage wineprefix cluster
#        Work with distro package manager
#        Work with winehq repository binary package or your own build
#        Work with winetricks
#        Integrated application configuration
#        Write with shell script
#
#    Copyright (C) 2017,2018 佟大维 <tim110011!163.com>
#
#    License:
#        This program is free software; you can redistribute it and/or
#        modify it under the terms of the GNU Lesser General Public
#        License as published by the Free Software Foundation; either
#        version 2.1 of the License, or (at your option) any later
#        version.
#
#        This program is distributed in the hope that it will be useful,
#        but WITHOUT ANY WARRANTY; without even the implied warranty of
#        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#        GNU Lesser General Public License for more details.
#
#        You should have received a copy of the GNU Lesser General Public
#        License along with this program.  If not, see
#        <https://www.gnu.org/licenses/>.

app_config()  # application config, MODIFY ME!
{
    # application Description
    # install guide: dll override, registry work, etc

    export prefix="YOUR_APPLICATION_NAME"
    export working_version="3.10-staging" 					# remember check SWH_FACTORY in swh_config()
    export WINEARCH=win64 							# win32 or win64
    #export invoker="" 								# primusrun; perf recored
    export runner="wine" 							# wine, winedbg
    #export LC_ALL=zh_CN.utf8 						# for non-unicode program, see 'locale -a' command

    #export PULSE_LATENCY_MSEC=60 					# PulseAudio walkaround for some game, may mute "Test Sound" in winecfg

    # DXVK setting
    # https://github.com/doitsujin/dxvk/wiki/Driver-support

    #export DXVK_DEBUG_LAYERS=1
    #export DXVK_LOG_LEVEL=debug
    #export DXVK_HUD=devinfo,fps,drawcalls,memory

    export app1dir='C:\abc'
    export app1name='xyz.exe'
    export app1args=''

    #export app2dir=""
    #export app2name=""
    #export app2args=""
}

swh_config()  # swh config, CHECK ME!
{
    export swh_factory="/opt/wine-staging" 				# wine-stable, wine-devel, wine-staging, WINE_INSTALL_DIR
    export dxvk_dir="$HOME/0_wine/dxvk/dxvk-0.54" 		# DXVK binary release
    export swh_cellar="$HOME/_wine_cellar" 				# store wine here
    export swh_table="$HOME/_wine" 						# wineprefix dirs cluster
    export WINEDEBUG=fixme-all
    export WINEDLLOVERRIDES=winemenubuilder.exe=d
}

swh_pinfo()
{
    printf "swh INFO: %s\n" "$@"
}

swh_error()
{
    printf "swh ERROR: %s\n" "$@" >&2
    exit 1
}

swh_storewine()
{
    if ! [ -x "$swh_factory/bin/wine" ] ; then
        echo "swh_factory=$swh_factory"
        swh_error "wine in \$swh_factory/bin: missing or not executable. install winehq or check setting in swh_config()"
    fi
        factory_version=$(wine --version | tr [:upper:] [:lower:] | cut -d - -f 2- | tr -d "()" | tr " " "-")
    swh_pinfo "\$factory_version=$factory_version"
    if [ -f "$swh_cellar/$WINEARCH/$factory_version/bin/wine" ] ; then
        swh_pinfo "$swh_cellar/$WINEARCH/$factory_version exists, nothing to do."
    else
        if ! (mkdir -p "$swh_cellar/$WINEARCH/$factory_version"); then
            swh_error "swh_storewine(): mkdir error"
        fi
        if ! (cp -r "$swh_factory"/* "$swh_cellar/$WINEARCH/$factory_version"); then
            swh_error "swh_storewine(): cp error"
        fi
    fi
}

swh_diag()
{
    echo 'WINEVERPATH=$swh_cellar/$WINEARCH/$working_version'
    echo "WINEVERPATH=$swh_cellar/$WINEARCH/$working_version"
    echo 'WINEPREFIX=$swh_table/$WINEARCH/$working_version/$prefix'
    echo "WINEPREFIX=$swh_table/$WINEARCH/$working_version/$prefix"
}

swh_init()
{
    if ! [ -d "$swh_cellar/$WINEARCH/$working_version" ] ; then
        swh_diag
        swh_error "swh_init(): $swh_cellar/$WINEARCH/$working_version not exist, store wine to your own repository directory before use. try ./$(basename $0) -s"
    fi
    export WINEPREFIX="$swh_table/$WINEARCH/$working_version/$prefix"
    if ! [ -d "$WINEPREFIX" ]; then
        mkdir -p "$WINEPREFIX"
    fi
    export WINEVERPATH="$swh_cellar/$WINEARCH/$working_version"
    export PATH="$WINEVERPATH/bin:$PATH"
    export WINESERVER="$WINEVERPATH/bin/wineserver"
    export WINELOADER="$WINEVERPATH/bin/wine"
    export WINEDLLPATH="$WINEVERPATH/lib/wine/fakedlls"
    export LD_LIBRARY_PATH="$WINEVERPATH/lib:$LD_LIBRARY_PATH"
}

swh_checkwine()
{
    if ! [ -d "$swh_table/$WINEARCH/$working_version/$prefix" ] || [ -z "$(ls -A $swh_table/$WINEARCH/$working_version/$prefix)" ] ; then
        swh_diag
        swh_error "swh_checkwine(): wineprefix dir not exist or is empty, explicit create it. try ./$(basename $0) -c"
    fi
    if ! [ -x "$WINEVERPATH/bin/wine" ] ; then
        swh_diag
        swh_error "wine in \$WINEVERPATH/bin:missing or not executable."
    fi
}

swh_test()
{
    :
}

## work with winetricks, use .verb file
# d3dcompiler_42, 32bit and 64bit
swh_ww_d3dcompiler_42()
{
    swh_tempdir="$(mktemp -d "${TMPDIR:-/tmp}/swhtemp.XXXXXXXX")"
    if ( [ -d "$swh_tempdir" ] && [ -w "$swh_tempdir" ] ); then
        cat > "$swh_tempdir"/swh_ww_d3dcompiler_42.verb <<"__SWH_WW_D3DCOMPILER_42_EOF_"
w_metadata swh_ww_d3dcompiler_42 dlls \
    title="MS d3dcompiler_42.dll (Simple Wine Helper)" \
    publisher="Microsoft" \
    year="2010" \
    media="download" \
    file1="../directx9/directx_Jun2010_redist.exe" \
    installed_file1="$W_SYSTEM32_DLLS_WIN/d3dcompiler_42.dll" \

load_swh_ww_d3dcompiler_42()
{
    dllname=d3dcompiler_42

    helper_directx_Jun2010

    w_try_cabextract -d "$W_TMP" -L -F "*$dllname*x86*" "$W_CACHE"/directx9/$DIRECTX_NAME
    for x in "$W_TMP"/*.cab; do
        w_try_cabextract -d "$W_SYSTEM32_DLLS" -L -F "$dllname.dll" "$x"
    done
    if test "$W_ARCH" = "win64"; then
        w_try_cabextract -d "$W_TMP" -L -F "*$dllname*x64*" "$W_CACHE"/directx9/$DIRECTX_NAME
        for x in "$W_TMP"/*x64.cab
        do
            w_try_cabextract -d "$W_SYSTEM64_DLLS" -L -F "$dllname.dll" "$x"
        done
    fi

    w_override_dlls native $dllname
}
__SWH_WW_D3DCOMPILER_42_EOF_
        winetricks "$swh_tempdir"/swh_ww_d3dcompiler_42.verb
    else
        swh_error "swh_ww_d3dcompiler_42(): mktemp error."
    fi
    rm -rf "$swh_tempdir"
}

# xact, 32bit and 64bit, code copied from winetricks version 20180217
swh_ww_xact()
{
    swh_tempdir="$(mktemp -d "${TMPDIR:-/tmp}/swhtemp.XXXXXXXX")"
    if ( [ -d "$swh_tempdir" ] && [ -w "$swh_tempdir" ] ); then
        cat > "$swh_tempdir"/swh_ww_xact.verb <<"__SWH_WW_XACT_EOF_"
w_metadata swh_ww_xact dlls \
    title="MS XACT Engine (Simple Wine Helper)" \
    publisher="Microsoft" \
    year="2010" \
    media="download" \
    file1="../directx9/directx_Jun2010_redist.exe" \
    installed_file1="$W_SYSTEM32_DLLS_WIN/xactengine2_0.dll"

load_swh_ww_xact()
{
    helper_directx_Jun2010

    # Extract xactengine?_?.dll, X3DAudio?_?.dll, xaudio?_?.dll, xapofx?_?.dll
    w_try_cabextract -d "$W_TMP" -L -F '*_xact_*x86*' "$W_CACHE/directx9/$DIRECTX_NAME"
    w_try_cabextract -d "$W_TMP" -L -F '*_x3daudio_*x86*' "$W_CACHE/directx9/$DIRECTX_NAME"
    w_try_cabextract -d "$W_TMP" -L -F '*_xaudio_*x86*' "$W_CACHE/directx9/$DIRECTX_NAME"

    for x in "$W_TMP"/*.cab ; do
        w_try_cabextract -d "$W_SYSTEM32_DLLS" -L -F 'xactengine*.dll' "$x"
        w_try_cabextract -d "$W_SYSTEM32_DLLS" -L -F 'xaudio*.dll' "$x"
        w_try_cabextract -d "$W_SYSTEM32_DLLS" -L -F 'x3daudio*.dll' "$x"
        w_try_cabextract -d "$W_SYSTEM32_DLLS" -L -F 'xapofx*.dll' "$x"
    done

    if test "$W_ARCH" = "win64" ; then
        w_try_cabextract -d "$W_TMP" -L -F '*_xact_*x64*' "$W_CACHE/directx9/$DIRECTX_NAME"
        w_try_cabextract -d "$W_TMP" -L -F '*_x3daudio_*x64*' "$W_CACHE/directx9/$DIRECTX_NAME"
        w_try_cabextract -d "$W_TMP" -L -F '*_xaudio_*x64*' "$W_CACHE/directx9/$DIRECTX_NAME"
        for x in "$W_TMP"/*x64.cab ; do
            w_try_cabextract -d "$W_SYSTEM64_DLLS" -L -F 'xactengine*.dll' "$x"
            w_try_cabextract -d "$W_SYSTEM64_DLLS" -L -F 'xaudio*.dll' "$x"
            w_try_cabextract -d "$W_SYSTEM64_DLLS" -L -F 'x3daudio*.dll' "$x"
            w_try_cabextract -d "$W_SYSTEM64_DLLS" -L -F 'xapofx*.dll' "$x"
        done
    fi

    # Register xactengine?_?.dll
    for x in "$W_SYSTEM32_DLLS"/xactengine* ; do
        w_try_regsvr "$(basename "$x")"
    done

    # and xaudio?_?.dll, but not xaudio2_8 (unsupported)
    for x in 0 1 2 3 4 5 6 7 ; do
        w_try_regsvr "$(basename "$W_SYSTEM32_DLLS/xaudio2_${x}")"
    done
}
__SWH_WW_XACT_EOF_
        winetricks "$swh_tempdir"/swh_ww_xact.verb
    else
        swh_error "swh_ww_xact(): mktemp error."
    fi
    rm -rf "$swh_tempdir"
}

swh_help()
{
    cat << _SWH_HELP_EOF_
Usage: $(basename $0) [OPTION]
Simple Wine Helper - SWH "$SWH_VER"

OPTION:

  -s, --store                              store wine binary to your repository
  -c, --winecfg, --create                  winecfg or create wineprefix
  -r [regfile], --regedit [regfile]        regedit [regfile]
  -l [application], --launch [application]
                                           run default or specified application
  -w [winetricks option], --winetricks [winetricks option]
                                           winetricks
  -ww d3dcompiler_42                       let winetricks install d3dcompiler_42, 32bit and 64bit
  -ww xact                                 let winetricks install xact, 32bit and 64bit (code copied from winetricks version 20180217)
  -vk32, --setup_dxvk_x32                  setup 32bit dxvk
  -vk64, --setup_dxvk_x64                  setup 64bit dxvk
  -h, --help                               display this help and exit
      --version                            output version information and exit
  NO ARGUEMENT                             show basic mode main menu

EXAMPLES:

  $(basename $0) -l 'C:\a b\xy.exe'     run specified application
  $(basename $0) -l cmd                 run wine cmd
  $(basename $0) -w d3dcompiler_43      work with winetricks, arguement

QUICK GUIDE:
1. Install wine pagkage from winehq or wine-staging repository
    or set swh_factory variable to your own built wine dir,
    this directory should contain these dirs: bin lib lib64
2. Install winetricks
3. Modify settings in swh_config() app_config() function
4. (Optional) Modify settings in app_menu() function and ##main() block
5. Store wine binary to your won repository (dir): $(basename $0) -s
6. Create wineprefix, configure basic settings via winecfg: $(basename $0) -c
7. (Optional) Configure advanced settings via winetricks: $(basename $0) -w
8. Copy or move windows application to wineprefix
9. Launch application: $(basename $0) -l
10. (Optional) Make multiple copies of me
11. (Optional) Rename me

ADVANCED FEATURE SUGGESTION (FOR USERS FAMILIAR WITH BASH ):
1. View the code and use command arguement
2. Modding me to add more feature

NOTE:
Any version of wine (mostly your distro) installed to /bin or /usr/bin directory
(cluttered with other files) is not supported.
Plese use binary package from winehq or wine-staging repository,
or if you build wine yourself, install it to INDEPENDENT directory,
for example: in fedora, winehq-staging package is installed to /opt/wine-staging
Using winetricks: "Select the default wineprefix" means select THIS wineprefix
_SWH_HELP_EOF_
}

app_menu()  # menu function, modify me (optional)
{
    cat << APP_MENU_EOF_

Simple Wine Helper - SWH "$SWH_VER"
    (BASIC MODE, MORE FEATURE AVAIABLE THROUGH COMMAND ARGUEMENT )

  a. run "$app1name"
  b. run "$app2name"
  y. wine cmd
  z. winefile
  1. copy wine binary to your own repository dir
  2. create wineprefix or run winecfg
  3. regedit
  4. winetricks
  5. winetricks d3dcompiler_42 (32 bit and 64 bit)
  6. winetricks xact (32 bit and 64 bit)
  9. help
  0. exit

APP_MENU_EOF_
    echo "Input id then press Enter key."
    read -p "(a/b/y/z/1/2/3/4/5/9/0)" app_menu_input
    case $app_menu_input in
    a | A)
        swh_init
        swh_checkwine
        if [ -n "$invoker" ]; then
            "$invoker" "$runner" start /d "$app1dir" "$app1name" "$app1args"
        else
            "$runner" start /d "$app1dir" "$app1name" "$app1args"
        fi
        ;;
    b | B)
        swh_init
        swh_checkwine
        if [ -n "$invoker" ]; then
            "$invoker" "$runner" start /d "$app2dir" "$app2name" "$app2args"
        else
            "$runner" start /d "$app2dir" "$app2name" "$app2args"
        fi
        ;;
    y | Y)
        swh_init
        swh_checkwine
        wine cmd
        ;;
    z | Z)
        swh_init
        swh_checkwine
        wine winefile
        ;;
    1)
        swh_storewine
        ;;
    2)
        swh_init
        wine winecfg
        ;;
    3)
        swh_init
        swh_checkwine
        regedit
        ;;
    4)
        swh_init
        swh_checkwine
        winetricks
        ;;
    5)
        swh_init
        swh_checkwine
        swh_ww_d3dcompiler_42
        ;;
    6)
        swh_init
        swh_checkwine
        swh_ww_xact
        ;;
    9)
        swh_help
        ;;
    0)
        exit 0
        ;;
    *)
        swh_help
        ;;
    esac
    unset app_menu_input
}

## main()
##{
swh_config
app_config

# command line arguements, modify me (optional)
if [ $# -ge 1 ] ; then
    case "$1" in
    -l | -l1 | --launch_application_1)
        swh_init
        swh_checkwine
        if [ $# -eq 1 ] ; then
            if [ -n "$invoker" ]; then
                "$invoker" "$runner" start /d "$app1dir" "$app1name" "$app1args"
            else
                "$runner" start /d "$app1dir" "$app1name" "$app1args"
            fi
        else
            shift
            if [ -n "$invoker" ]; then
                "$invoker" "$runner" "$@"
            else
                "$runner" "$@"
            fi
        fi
        ;;
    -ll | -l2 | --launch_application_2)
        swh_init
        swh_checkwine
        if [ -n "$invoker" ]; then
            "$invoker" "$runner" start /d "$app2dir" "$app2name" "$app2args"
        else
            "$runner" start /d "$app2dir" "$app2name" "$app2args"
        fi
        ;;
    #-lll | -l3 | --launch_application_3)
    #    swh_init
    #    swh_checkwine
    #    if [ -n "$invoker" ]; then
    #        "$invoker" "$runner" start /d "$app3dir" "$app3name" "$app3args"
    #    else
    #        "$runner" start /d "$app3dir" "$app3name" "$app3args"
    #    fi
    #    ;;
    -netv | --netfx_setupverifier)
        swh_init
        swh_checkwine
        wine netfx_setupverifier.exe
        ;;
    -s | --storewine)
        swh_storewine
        ;;
    -c | --winecfg | --create)
        swh_init
        wine winecfg
        ;;
    -r | --regedit)
        swh_init
        swh_checkwine
        if [ -f "$2" ] ; then
            regedit "$2"
        else
            regedit
        fi
        ;;
    -w | --winetricks)
        swh_init
        swh_checkwine
        if [ $# -eq 1 ] ; then
            winetricks
        else
            shift
            winetricks "$@"
        fi
        ;;
    -ww | --swhwinetricks)
        swh_init
        swh_checkwine
        if [ $# -eq 2 ] ; then
            shift
            case "$1" in
            d3dcompiler_42)
                swh_ww_d3dcompiler_42
                ;;
            xact)
                swh_ww_xact
                ;;
            *)
                swh_error "unknown arguement."
                ;;
            esac
        else
            swh_error "wrong arguement."
        fi
        ;;
    -vk32 | --setup_dxvk_x32)
        swh_init
        swh_checkwine
        cd "$dxvk_dir"/x32
        bash setup_dxvk.sh
        ;;
    -vk64 | --setup_dxvk_x64)
        swh_init
        swh_checkwine
        cd "$dxvk_dir"/x64
        bash setup_dxvk.sh
        ;;
    -z | --test)
        swh_init
        swh_checkwine
        swh_test
        ;;
    -h | --help)
        swh_help
        ;;
    --version)
        echo "swh-$SWH_VER"
        ;;
    *)
        swh_help
        ;;
    esac
else
    app_menu
fi
##}
