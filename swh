#!/bin/sh

swh_ver="2.3.0"

# This is a UTF-8 file
# You should see an o with two dots over it here [ö]
# You should see a micro (u with a tail) here [µ]
# You should see a trademark symbol here [™]

#	Simple Wine Helper (SWH)
#
#		Command-line interface wrapper for wine
#

#	Copyright (C) 2017,2018 佟大维 <tim110011!163.com>
#
#	License:
#		This program is free software; you can redistribute it and/or
#		modify it under the terms of the GNU Lesser General Public
#		License as published by the Free Software Foundation; either
#		version 2.1 of the License, or (at your option) any later
#		version.
#
#		This program is distributed in the hope that it will be useful,
#		but WITHOUT ANY WARRANTY; without even the implied warranty of
#		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#		GNU Lesser General Public License for more details.
#
#		You should have received a copy of the GNU Lesser General Public
#		License along with this program.  If not, see
#		<https://www.gnu.org/licenses/>.

swh_config()  # swh default value, modify me
{
	export cellar="$HOME/swh/cellar"				# store wine here
	export table="$HOME/swh/table"					# wineprefix dirs cluster
	export drives="$HOME/swh/drives"				# wine drives dir
	export WINEDEBUG=fixme-all
	export WINEDLLOVERRIDES=winemenubuilder.exe=d
}

swh_error()
{
	printf "swh ERROR: %s\n" "$*" >&2
	exit 1
}

swh_check_dependencies()
{
	dependencies=(cabextract winetricks)
	missing=0
	for ((i=0; i < ${#dependencies[*]}; i++)); do
		if ! (which ${dependencies[i]} >/dev/null 2>&1); then
			printf "%s not found.\n" ${dependencies[i]}
			missing=$(($missing+1))
		fi
	done
	if (( $missing > 0 )); then
		swh_error "$missing dependencies not found."
	fi
}

swh_storewine()
{
	if ! [ -x "$install/bin/wine" ] ; then
		swh_error "wine in \$install/bin: missing or not executable. Install winehq or check \$install in your launcher"
	fi
		build_name=$(wine --version | tr [:upper:] [:lower:] | cut -d - -f 2- | tr -d "()" | tr " " "-")
	if [ -f "$cellar/$WINEARCH/$build_name/bin/wine" ] ; then
		printf "%s/%s/%s exists, nothing to do.\n" "$cellar" "$WINEARCH" "$build_name"
	else
		if ! (mkdir -p "$cellar/$WINEARCH/$build_name"); then
			swh_error "swh_storewine(): mkdir error"
		fi
		if ! (cp -r "$install"/* "$cellar/$WINEARCH/$build_name"); then
			swh_error "swh_storewine(): cp error"
		fi
	fi
}

swh_diag()
{
	echo 'WINEVERPATH=$cellar/$WINEARCH/$build'
	echo "WINEVERPATH=$cellar/$WINEARCH/$build"
	echo 'WINEPREFIX=$table/$WINEARCH/$build/$prefix'
	echo "WINEPREFIX=$table/$WINEARCH/$build/$prefix"
}

swh_init()
{
	if ! [ -d "$cellar/$WINEARCH/$build" ] ; then
		swh_diag
		swh_error "swh_init(): $cellar/$WINEARCH/$build not exist, store wine to your own repository directory before use. try $swh_launcher s"
	fi
	export WINEPREFIX="$table/$WINEARCH/$build/$prefix"
	if ! [ -d "$WINEPREFIX" ]; then
		mkdir -p "$WINEPREFIX"
	fi
	export WINEVERPATH="$cellar/$WINEARCH/$build"
	export PATH="$WINEVERPATH/bin:$PATH"
	export WINESERVER="$WINEVERPATH/bin/wineserver"
	export WINELOADER="$WINEVERPATH/bin/wine"
	export WINEDLLPATH="$WINEVERPATH/lib/wine/fakedlls"
	export LD_LIBRARY_PATH="$WINEVERPATH/lib:$LD_LIBRARY_PATH"
	# use wine64 on 64bit WINEARCH
	#if ( [ X"$WINEARCH" == X'win64' ] && [ X"$runner" == X'wine' ] ); then
	#	export runner=wine64
	#	printf "[warn]: runner=wine64\n"
	#fi
}

swh_checkwine()
{
	if ! [ -d "$table/$WINEARCH/$build/$prefix" ] || [ -z "$(ls -A $table/$WINEARCH/$build/$prefix)" ] ; then
		swh_diag
		swh_error "swh_checkwine(): wineprefix dir not exist or is empty, explicit create it. try $swh_launcher c"
	fi
	if ! [ -x "$WINEVERPATH/bin/wine" ] ; then
		swh_diag
		swh_error "wine in '$WINEVERPATH'/bin:missing or not executable."
	fi
}

swh_test()
{
	:
}

## work with winetricks, use .verb file
# d3dcompiler_42, 32bit and 64bit
swh_ww_d3dcompiler_42()
{
	swh_tempdir="$(mktemp -d "${TMPDIR:-/tmp}/swhtemp.XXXXXXXX")"
	if ( [ -d "$swh_tempdir" ] && [ -w "$swh_tempdir" ] ); then
		verbfile='swh_ww_d3dcompiler_42.verb'
		cat > "$swh_tempdir/$verbfile" <<"__EOF__"
w_metadata swh_ww_d3dcompiler_42 dlls \
	title="MS d3dcompiler_42.dll (Simple Wine Helper)" \
	publisher="Microsoft" \
	year="2010" \
	media="download" \
	file1="../directx9/directx_Jun2010_redist.exe" \
	installed_file1="$W_SYSTEM32_DLLS_WIN/d3dcompiler_42.dll" \

load_swh_ww_d3dcompiler_42()
{
	dllname=d3dcompiler_42

	helper_directx_Jun2010

	w_try_cabextract -d "$W_TMP" -L -F "*$dllname*x86*" "$W_CACHE"/directx9/$DIRECTX_NAME
	for x in "$W_TMP"/*.cab; do
		w_try_cabextract -d "$W_SYSTEM32_DLLS" -L -F "$dllname.dll" "$x"
	done
	if test "$W_ARCH" = "win64"; then
		w_try_cabextract -d "$W_TMP" -L -F "*$dllname*x64*" "$W_CACHE"/directx9/$DIRECTX_NAME
		for x in "$W_TMP"/*x64.cab
		do
			w_try_cabextract -d "$W_SYSTEM64_DLLS" -L -F "$dllname.dll" "$x"
		done
	fi

	w_override_dlls native $dllname
}
__EOF__
		winetricks "$swh_tempdir/$verbfile"
	else
		swh_error "swh_ww_d3dcompiler_42(): mktemp error."
	fi
	rm -rf "$swh_tempdir"
}

## extract dotnet40 on 64bit prefix
# note: winetricks use sha256sum to verify file, list use sha1sum
swh_ww_dotnet40extract()
{
	swh_tempdir="$(mktemp -d "${TMPDIR:-/tmp}/swhtemp.XXXXXXXX")"
	if ( [ -d "$swh_tempdir" ] && [ -w "$swh_tempdir" ] ); then
		verbfile='swh_ww_dotnet40extract.verb'
		cat > "$swh_tempdir/$verbfile" <<"__EOF__"
w_metadata swh_ww_dotnet40extract dlls \
	title="Microsoft .NET Framework 4 extract (Simple Wine Helper)" \
	publisher="Microsoft" \
	year="2011" \
	media="download" \
	conflicts="dotnet20 dotnet20sdk dotnet20sp1 dotnet20sp2 dotnet35sp1 dotnet40 dotnet46 dotnet461 dotnet462 vjrun20" \
	file1="dotNetFx40_Full_x86_x64.exe" \
	destlist="dotnet40list" \
	installed_file1="c:/windows/swh_ww_dotnet40extract.installed.workaround" \

load_swh_ww_dotnet40extract()
{
	if [ X"$WINEARCH" != X'win64' ]; then
		w_die "This function is made for 64bit wineprefix."
	fi
	if [ X"$runner" == X'wine' ]; then
		export runner=wine64
		printf "[warn]: runner=wine64\n"
	fi

	w_download https://download.microsoft.com/download/9/5/A/95A9616B-7A37-4AF6-BC36-D6EA96C8DAAE/dotNetFx40_Full_x86_x64.exe 65e064258f2e418816b304f646ff9e87af101e4c9552ab064bb74d281c38659f
	w_download https://raw.githubusercontent.com/tim110011/Simple-Wine-Helper/master/dotnet40list f1dfa277882c6963fc17d4e5dba7449e47cf8f300ec56f517227b6f036a01b97
	w_call remove_mono

	w_try_cd "$W_TMP"
	mkdir exedir
	mkdir netfx_all
	w_try_7z "$W_TMP"/exedir "$W_CACHE"/$W_PACKAGE/$file1
	w_try_7z "$W_TMP"/netfx_all "$W_TMP"/exedir/netfx_Core.mzz
	w_try_7z "$W_TMP"/netfx_all "$W_TMP"/exedir/netfx_Extended.mzz

	w_try_cd "$W_TMP"/netfx_all
	sha1sum * >../sourcelist.txt

	exec 0<"$W_CACHE/$W_PACKAGE/$destlist"
	while read line; do
		sha1sumkey=$(printf "%s\n" $line | cut -d' ' -f 1)
		destwindows=$(printf "%s\n" $line | cut -d' ' -f 2-)
		sourcefile=$(grep -w -m 1 $sha1sumkey "$W_TMP"/sourcelist.txt | cut -d' ' -f 3-)
		if [ "$sourcefile" ]; then
			destdir="$(dirname "$WINEPREFIX/$destwindows")"
			if ! [ -d "$destdir" ];then
				mkdir -p "$destdir"
			fi
			\cp -rfv "$sourcefile" "$WINEPREFIX/$destwindows"
		else
			printf "[warn]: missing file: %s %s\n" $sha1sumkey $destwindows
		fi
	done

	w_override_dlls native mscoree

	"$runner" reg add "HKLM\\Software\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full" /v Install /t REG_DWORD /d 0001 /f
	"$runner" reg add "HKLM\\Software\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full" /v Version /t REG_SZ /d "4.0.30319" /f

	w_try touch "${W_WINDIR_UNIX}/swh_ww_dotnet40extract.installed.workaround"

}

__EOF__
		winetricks "$swh_tempdir/$verbfile"
	else
		swh_error "swh_ww_dotnet40extract(): mktemp error."
	fi
	rm -rf "$swh_tempdir"
}

## extract dotnet472 on 64bit prefix, run after ww dotnet40, dot not call remove_mono
# note: winetricks use sha256sum to verify file, list use sha1sum
swh_ww_dotnet472extract()
{
	swh_tempdir="$(mktemp -d "${TMPDIR:-/tmp}/swhtemp.XXXXXXXX")"
	if ( [ -d "$swh_tempdir" ] && [ -w "$swh_tempdir" ] ); then
		verbfile='swh_ww_dotnet472extract.verb'
		cat > "$swh_tempdir/$verbfile" <<"__EOF__"
w_metadata swh_ww_dotnet472extract dlls \
	title="Microsoft .NET Framework 4.7.2 extract (Simple Wine Helper)" \
	publisher="Microsoft" \
	year="2018" \
	media="download" \
	conflicts="" \
	file1="NDP472-KB4054530-x86-x64-AllOS-ENU.exe" \
	destlist="dotnet472list"
	installed_file1="c:/windows/swh_ww_dotnet472extract.installed.workaround" \

load_swh_ww_dotnet472extract()
{

	if [ X"$WINEARCH" != X'win64' ]; then
		w_die "This function is made for 64bit wineprefix."
	fi
	if [ X"$runner" == X'wine' ]; then
		export runner=wine64
		printf "[warn]: runner=wine64\n"
	fi

	w_download https://download.microsoft.com/download/6/E/4/6E48E8AB-DC00-419E-9704-06DD46E5F81D/NDP472-KB4054530-x86-x64-AllOS-ENU.exe c908f0a5bea4be282e35acba307d0061b71b8b66ca9894943d3cbb53cad019bc
	w_download https://raw.githubusercontent.com/tim110011/Simple-Wine-Helper/master/dotnet472list 24d257c079aaf070ce9928beda53da19719164c1af6853e69c769895eec252ac

	w_try_cd "$W_TMP"
	mkdir exedir
	mkdir netfx_all

	w_try_7z "$W_TMP"/exedir "$W_CACHE"/$W_PACKAGE/$file1
	w_try_7z "$W_TMP"/netfx_all "$W_TMP"/exedir/netfx_Full.mzz

	w_try_cd "$W_TMP"/netfx_all
	sha1sum * >../sourcelist.txt

	exec 0<"$W_CACHE/$W_PACKAGE/$destlist"
	while read line; do
		sha1sumkey=$(printf "%s\n" $line | cut -d' ' -f 1)
		destwindows=$(printf "%s\n" $line | cut -d' ' -f 2-)
		sourcefile=$(grep -w -m 1 $sha1sumkey "$W_TMP"/sourcelist.txt | cut -d' ' -f 3-)
		if [ "$sourcefile" ]; then
			destdir="$(dirname "$WINEPREFIX/$destwindows")"
			if ! [ -d "$destdir" ];then
				mkdir -p "$destdir"
			fi
			\cp -rfv "$sourcefile" "$WINEPREFIX/$destwindows"
		else
			printf "[warn]: missing file: %s %s\n" $sha1sumkey $destwindows
		fi
	done

	w_override_dlls native mscoree

	"$runner" reg add "HKLM\\Software\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full" /v Install /t REG_DWORD /d 0001 /f
	"$runner" reg add "HKLM\\Software\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full" /v Version /t REG_SZ /d "4.0.30319" /f

	w_try touch "${W_WINDIR_UNIX}/swh_ww_dotnet472extract.installed.workaround"

}

__EOF__
		winetricks "$swh_tempdir/$verbfile"
	else
		swh_error "swh_ww_dotnet472extract(): mktemp error."
	fi
	rm -rf "$swh_tempdir"
}

# xact, 32bit and 64bit
swh_ww_xact()
{
	swh_tempdir="$(mktemp -d "${TMPDIR:-/tmp}/swhtemp.XXXXXXXX")"
	if ( [ -d "$swh_tempdir" ] && [ -w "$swh_tempdir" ] ); then
		verbfile='swh_ww_xact.verb'
		cat > "$swh_tempdir/$verbfile" <<"__EOF__"
w_metadata swh_ww_xact dlls \
	title="MS XACT Engine (Simple Wine Helper)" \
	publisher="Microsoft" \
	year="2010" \
	media="download" \
	file1="../directx9/directx_Jun2010_redist.exe" \
	installed_file1="$W_SYSTEM32_DLLS_WIN/xactengine2_0.dll"

load_swh_ww_xact()
{
	helper_directx_Jun2010

	rm -rf "$W_TMP"/cab
	mkdir -p "$W_TMP"/cab
	cabcab=(*XACT_x* *XAudio_x* *X3DAudio_x*)
	for ((i=0; i < ${#cabcab[*]}; i++)); do
		cabextract -q -d "$W_TMP"/cab -L -F ${cabcab[i]} "$W_CACHE/directx9/$DIRECTX_NAME"
	done

	rm -rf "$W_TMP"/32
	mkdir -p "$W_TMP"/32
	for cab32 in "$W_TMP"/cab/*_x86.cab ; do
		cabextract -q -d "$W_TMP"/32 -L -F '*.dll' "$cab32"
	done
	cp -f "$W_TMP"/32/* "$W_SYSTEM32_DLLS"
	for swh_dllname in $(ls -1 "$W_TMP"/32 | sed -n -E 's/\.dll$//gp'); do
		w_override_dlls native $swh_dllname
	done
	rm -rf "$W_TMP"/32

	if test "$W_ARCH" = "win64" ; then
		rm -rf "$W_TMP"/64
		mkdir -p "$W_TMP"/64
		for cab64 in "$W_TMP"/cab/*_x64.cab ; do
			cabextract -q -d "$W_TMP"/64 -L -F '*.dll' "$cab64"
		done
		cp -f "$W_TMP"/64/* "$W_SYSTEM64_DLLS"
		for swh_dllname in $(ls -1 "$W_TMP"/64 | sed -n -E 's/\.dll$//gp'); do
			w_override_dlls native $swh_dllname
		done
		rm -rf "$W_TMP"/64
	fi

	rm -rf "$W_TMP"/cab
}
__EOF__
		winetricks "$swh_tempdir/$verbfile"
	else
		swh_error "swh_ww_xact(): mktemp error."
	fi
	rm -rf "$swh_tempdir"
}

swh_help()
{
	cat <<"__EOF__"
Simple Wine Helper $swh_ver

Usage: APP_LAUNCHER COMMAND [arguement]

Commands:
s                           Store wine to your cellar dir
c                           Run winecfg, Create wineprefix
cc                          Same as c, also remove symbolic link z: your root dir will not visable by wine programs
cdd                         Use after c or cc, create shared drive D: files in this dir is visable by all wine prefixes (default path: '\$HOME/swh/drives/drive_d')
cde                         Use after c or cc, create pirvate drive E: files in this dir is visable by this wine prefix only (default path: '\$HOME/swh/drives/\$prefix/drive_e')
r [registry file]           Run regedit [regfile]
l [application]             Launch specified application: see Examples below
1                           Launch 1st application
2                           Launch 2nd application
99                          Launch 99th application, swh now supports up to 99 apps in one launcher!
w [winetricks command]      winetricks command
ww [swh command]            swh command, these commands need winetricks as dependency, but they are NOT winetricks command
  ww d3dcompiler_42             install d3dcompiler_42, 32bit and 64bit
  ww xact                       install xact full suit, 32bit and 64bit
  ww dotnet40                   (EXPERIMENTIAL FUNCTION) extract dotnet40 files only, on 64bit prefix
  ww dotnet472                  (EXPERIMENTIAL FUNCTION) extract dotnet472 files only, on 64bit prefix. use this after using ww dotnet40
oldvk                       Setup DXVK 0.5x, 0.6x
vk                          Setup DXVK 0.7x, 0.8x, 0.9x
NO ARGUEMENT                Show a small menu

Examples:
  APP_LAUNCHER l 'C:\a b\xy.exe'    Run specified application
  APP_LAUNCHER l cmd                Run wine cmd
  APP_LAUNCHER w d3dcompiler_43     This is a winetricks command, it installs d3dcompiler_43 override
  APP_LAUNCHER ww d3dcompiler_42    This is a swh command, it installs d3dcompiler_42 override

Quick Guide:
1. Install wine into a SEPERATE directory:
  Use official winehq repository:
    wine should be installed in directory like: '/opt/wine-stable', '/opt/wine-devel', '/opt/wine-staging'
    Your distro may install their wine package into non-seperate dir like /usr/bin , this is not supported
  Build wine yourself:
    modify wine's configure arguement: configure --prefix="SEPERATE_INSTALL_DIR"
    copy your built wine to \$cellar (default location is '\$HOME/swh/cellar')
  This directory should contain these dirs: bin lib lib64
2. Install swh and winetricks, perferred dir is '\$HOME/bin', modify your .bashrc file add it to '\$PATH'
3. Make a copy of example_launcher. Rename it and modify settings
5. Store wine into your cellar dir: APP_LAUNCHER s
6. Create wineprefix: APP_LAUNCHER c
7A. Wine configuration example for steam users:
  [Drives] -> [Add] -> [Select Drive Letter] -> [D:] -> [OK] -> [Browse] -> "/home/USERNAME/swh/drives/drive_d/"
  Put SteamSetup.exe in that dir, make a copy of example_launcher and modify it like this:
    dir[9]='D:\'
    exe[9]='SteamSetup.exe'
  Save new file as steam_launcher, run command "chmod u+x steam_launcher" make it executable
  Use command "steam_launcher 9" to launch SteamSetup.exe
  Steam settings:
    Steam settings -> [Downloads] -> Set Default SteamLibrary Folder to D:\SteamLibrary
  Modify steam_launcher as:
    dir[1]='C:\Program Files (x86)\Steam'
    exe[1]='Steam.exe'
  Save file, use command "steam_launcher 1" to launch steam
7B. Old method: Link or copy or move windows application to wineprefix drive_c:
	path example: /home/USERNAME/swh/table/win64/3.20-staging/example/drive_c/
8. Tweak advanced settings via winetricks: APP_LAUNCHER w
9. Launch 1st application: APP_LAUNCHER 1
10. Launch 2nd application: APP_LAUNCHER 2

NOTE:
1. Using winetricks: "Select the default wineprefix" means select THIS wineprefix
__EOF__
}

#main()
#{
swh_check_dependencies
if (( $# > 0 )); then
	swh_config
	case "$1" in
	l)
		swh_init
		swh_checkwine
		if (( $# != 1 )); then
			shift
			if ! [ -v invoker ]; then
				"$runner" "$@"
			else
				"$invoker" "$runner" "$@"
			fi
		else
			swh_help
		fi
		;;
	[1-9] | [1-9][0-9])
		swh_init
		swh_checkwine
		i=$1
		if ! [ -v invoker ]; then
			if [ -z ${args[i]} ];then
				"$runner" start /d "${dir[i]}" "${exe[i]}"
			else
				"$runner" start /d "${dir[i]}" "${exe[i]}" "${args[i]}"
			fi
		else
			if [ -z ${args[i]} ];then
				"$invoker" "$runner" start /d "${dir[i]}" "${exe[i]}"
			else
				"$invoker" "$runner" start /d "${dir[i]}" "${exe[i]}" "${args[i]}"
			fi
		fi
		;;
	netv | --netfx_setupverifier)
		swh_init
		swh_checkwine
		"$runner" netfx_setupverifier.exe
		;;
	s)
		swh_storewine
		;;
	c)
		swh_init
		wine winecfg
		;;
	cc)
		swh_init
		wine winecfg
		if [ -L "$WINEPREFIX/dosdevices/z:" ]; then
			rm "$WINEPREFIX/dosdevices/z:"
		fi
		;;
	cdd)
		swh_init
		mkdir -p "$drives/drive_d"
		if ! (cd $WINEPREFIX/dosdevices && ln -s "$drives/drive_d" d:);then
			swh_error "cdd: create drive d failed"
		fi
		;;
	cde)
		swh_init
		mkdir -p "$drives/$prefix/drive_e"
		if ! (cd $WINEPREFIX/dosdevices && ln -s "$drives/$prefix/drive_e" e:);then
			swh_error "cde: create drive e failed"
		fi
		;;
	r | --regedit)
		swh_init
		swh_checkwine
		if [ -f "$2" ]; then
			regedit "$2"
		else
			regedit
		fi
		;;
	w | --winetricks)
		swh_init
		swh_checkwine
		if (( $# == 1 )); then
			winetricks
		else
			shift
			winetricks "$@"
		fi
		;;
	ww | --swhwinetricks)
		swh_init
		swh_checkwine
		if (( $# == 2 )); then
			shift
			case "$1" in
			d3dcompiler_42)
				swh_ww_d3dcompiler_42
				;;
			dotnet40)
				swh_ww_dotnet40extract
				;;
			dotnet472)
				swh_ww_dotnet472extract
				;;
			xact)
				swh_ww_xact
				;;
			*)
				swh_error "unknown arguement."
				;;
			esac
		else
			swh_error "wrong arguement."
		fi
		;;
	oldvk)
		swh_init
		swh_checkwine
		printf "installing 32bit old DXVK0.5x/0.6x...\n"
		cd "$dxvk_install"/x32
		bash setup_dxvk.sh
		if [ X"$WINEARCH" == X"win64" ]; then
			printf "installing 64bit old DXVK0.5x/0.6x...\n"
			cd "$dxvk_install"/x64
			bash setup_dxvk.sh
		fi
		;;
	vk)
		swh_init
		swh_checkwine
		cd "$dxvk_install"
		winetricks --force setup_dxvk.verb
		;;
	z | z1)
		swh_init
		swh_checkwine
		swh_test
		;;
	h | -h | --help)
		swh_help
		;;
	--version)
		printf "swh-%s\n" $SWH_VER
		;;
	*)
		swh_help
		;;
	esac
else
	#run launcher without arguement will show menu
	select item in ${exe[@]} help quit;do
		i=$REPLY
		if [ X"$item" == X"help" ]; then
			swh_help
			break
		fi
		if [ X"$item" == X"quit" ]; then
			break
		fi
		if ! [ -v invoker ]; then
			if [ -z ${args[i]} ];then
				"$runner" start /d "${dir[i]}" "${exe[i]}"
			else
				"$runner" start /d "${dir[i]}" "${exe[i]}" "${args[i]}"
			fi
		else
			if [ -z ${args[i]} ];then
				"$invoker" "$runner" start /d "${dir[i]}" "${exe[i]}"
			else
				"$invoker" "$runner" start /d "${dir[i]}" "${exe[i]}" "${args[i]}"
			fi
		fi
		break;
	done
fi
#}
