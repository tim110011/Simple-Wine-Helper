#!/bin/bash
# shellcheck disable=2154
set -e

# This is a UTF-8 file
# You should see an o with two dots over it here [ö]
# You should see a micro (u with a tail) here [µ]
# You should see a trademark symbol here [™]

#	Simple Wine Helper (SWH)
#
#		Command-line interface wrapper for wine
#

#	Copyright (C) 2017-2020 佟大维 <tim110011!163.com>
#
#	License:
#		This program is free software; you can redistribute it and/or
#		modify it under the terms of the GNU Lesser General Public
#		License as published by the Free Software Foundation; either
#		version 2.1 of the License, or (at your option) any later
#		version.
#
#		This program is distributed in the hope that it will be useful,
#		but WITHOUT ANY WARRANTY; without even the implied warranty of
#		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#		GNU Lesser General Public License for more details.
#
#		You should have received a copy of the GNU Lesser General Public
#		License along with this program.  If not, see
#		<https://www.gnu.org/licenses/>.


SWH_VERSION=2.12

swh_quit()
{
	printf "swh QUIT: %s\n" "$*"
	exit 0
}

swh_error()
{
	printf "swh ERROR: %s\n" "$*" >&2
	exit 1
}

swh_pause()
{
	typeset ch
	#shellcheck disable=2034
	read -r -p 'Press any key to continue...' ch
}

swh_create_config()
{
	rm -f ./swh_profile 2>/dev/null
	cat > ./swh_profile <<-'_EOF_'
		#!/bin/bash

		#SWH_PROFILE_VERSION=1
		cellar="$HOME/swh/cellar"						# store wine here
		table="$HOME/swh/table"							# wineprefix dirs cluster
		disk[1]="$HOME/swh/disk"						# dir hold wine extra drives ( D: E: ) , not in wineprefix, should on a fast SSD, for programs/games need fast disk io perofrmance.
		disk[2]="/mnt/hdd_sda3_home/me/swh/disk"		# optional, dir hold wine extra drives ( F: G: ) , not in wineprefix, maybe on a slow HDD, for small programs/games.
		windowsfonts="$HOME/swh/Fonts"					# optional, windows `Fonts` dir
	_EOF_
	(( $? == 0 )) || swh_error "${FUNCNAME[0]}: Create swh_profile error."
	chmod u+x ./swh_profile
}

swh_config()
{
	grep -q '#SWH_PROFILE_VERSION=1' ./swh_profile 2>/dev/null || swh_create_config
	source ./swh_profile
}

swh_checkdependency()
{
	typeset -i i=0
	until [ -z "$1" ]; do
		if ! { command -v "$1" > /dev/null 2>&1; }; then
			 i+=1
			 printf "Missing dependency: %s\n" "$1"
		fi
		shift
	done
	(( count == 0 )) || swh_error "${FUNCNAME[0]}: Dependency package requirement not met."
}

swh_storewine()
{
	[ -x "$install/bin/wine" ] || swh_error "${FUNCNAME[0]}: \$install/bin/wine is missing or not executable. \$install have wrong value or winehq is not installed"
	if [[ "$build_arch" == 'win64' ]]; then
		[ -x "$install/bin/wine64" ] || swh_error "${FUNCNAME[0]}: \$build_arch set to wine64 but \$install/bin/wine64 is missing or not executable!"
	fi
	typeset store_path
	store_path="$cellar/$build_arch/$( wine --version | tr "[:upper:]" "[:lower:]" | cut -d - -f 2- | tr -d "()" | tr " " "-" )"
	if ! [ -x "$store_path/bin/wine" ] ; then
		mkdir -p "$store_path"
		\cp -rfv "$install"/* "$store_path"
	else
		printf "%s exists, nothing to do.\n" "$store_path"
	fi
}

# downloader wrapper
# Usage: swh_download [-q] url
#         -q : download url to stdout silently (metadata)
#     no arg : download url to disk (data)
swh_download()
{
	typeset -i r
	case "$downloader" in
		wget)
			if [[ "$1" == '-q' ]]; then
				shift
				wget -q -t 10 --connect-timeout=40 -O - "$1"
				r=$?
			else
				wget -c -t 20 --connect-timeout=40 "$1"
				r=$?
			fi
			;;
		curl)
			if [[ "$1" == '-q' ]]; then
				shift
				curl -s -f --retry 10 --connect-timeout 40 "$1"
				r=$?
			else
				curl -C - -f --retry 20 --connect-timeout 40 -O "$1"
				r=$?
			fi
			;;
	esac
	return $r
}

swh_dlwine()
{
	if ! { grep fedora > /dev/null 2>&1 < /proc/version; }; then
		printf "Note: Download wine binary build from winehq repository for newest release of fedora.\nThis method may not work on your distor.\n"
		swh_pause
	fi
	swh_checkdependency rpm2cpio cpio realpath

	# 1. prepare dir, check if wine is already in cellar
	if ( uname -m | grep -q x86_64 ); then
		typeset pak_arch=win64
	else
		typeset pak_arch=win32
	fi

	[ -x "$cellar"/"$pak_arch"/"$build"/bin/wine ] && { printf "%s already stored in cellar, nothing to do.\n" "$build"; exit 0; }
	[ -d "$cellar"/"$pak_arch" ] || mkdir -p "$cellar"/"$pak_arch"
	cd "$cellar"/"$pak_arch" || swh_error "${FUNCNAME[0]}: cd \$cellar/\$WINEARCH failed."

	# 2. Check if $build pattern is valid. example: 1.2.3-rc4-staging ; 1.2-rc3
	typeset pattern='[0-9]\.[0-9](\.[0-9]){0,1}(-rc[1-9]){0,1}(-staging){0,1}'
	[[ "$build" =~ $pattern ]] || swh_error "${FUNCNAME[0]}: wrong value in \$build : unrecognized version pattern."

	# 3. Generate rpm file name pattern
	if [[ "$build" =~ staging ]]; then
		typeset build_ver="$(echo "$build" | sed -E 's/-rc/\.rc/g; s/-staging$//g')"
		typeset -a pat32=("wine-staging-common-$build_ver-[0-9](\.[0-9]){0,1}\.i686\.rpm")
		typeset -a pat64=("wine-staging64-$build_ver-[0-9](\.[0-9]){0,1}\.x86_64\.rpm")
	else
		typeset build_ver="$(echo "$build" | sed -E 's/-rc/\.rc/g')"
		typeset -a pat32=("wine-devel-common-$build_ver-[0-9](\.[0-9]){0,1}\.i686\.rpm" "wine-development-common-$build_ver-[0-9](\.[0-9]){0,1}\.i686\.rpm" "wine-stable-common-$build_ver-[0-9](\.[0-9]){0,1}\.i686\.rpm")
		typeset -a pat64=("wine-devel64-$build_ver-[0-9](\.[0-9]){0,1}\.x86_64\.rpm" "wine-development64-$build_ver-[0-9](\.[0-9]){0,1}\.x86_64\.rpm" "wine-stable64-$build_ver-[0-9](\.[0-9]){0,1}\.x86_64\.rpm")
	fi

	# 4. goto download dir
	mkdir -p "$build"-downloading || swh_error "${FUNCNAME[0]}: mkdir \$build-downloading failed"
	cd "$build"-downloading || swh_error "${FUNCNAME[0]}: cd \$build-downloading failed"

	# 5. Check network and download tool, get fedora distro release version
	if { command -v wget 1 > /dev/null 2>&1; }; then
		typeset downloader=wget
	elif { command -v curl 1 > /dev/null 2>&1; }; then
		typeset downloader=curl
	else
		swh_error "${FUNCNAME[0]}: This function need wget or curl"
	fi

	# 6. Download
	typeset -a rel
	readarray -t rel <<<"$(swh_download -q https://dl.winehq.org/wine-builds/fedora/ | grep -E -o '<a href="[0-9][0-9]/">' | sed -En 's/^<a href=\"//g; s/\/\">//gp' | sort | uniq)"
	[ -z "${rel[0]}" ] && swh_error "${FUNCNAME[0]}: list winehq fedora build repo failed."
	typeset -i i
	for (( i=-1; i >= $((${#rel[@]} * -1)); i-- )); do
		echo 'Using repo: https://dl.winehq.org/wine-builds/fedora/'"${rel[i]}"

		# 6.1 download wine.i686.rpm
		typeset buf32="$(swh_download -q https://dl.winehq.org/wine-builds/fedora/"${rel[i]}"/i686/)"
		[ -z "$buf32" ] && swh_error "${FUNCNAME[0]}: $downloader: get 32bit package list failed."
		typeset -i j
		for (( j=0; j < ${#pat32[@]}; j++ )); do
			typeset rpm32="$(echo "$buf32" | grep -Eo "${pat32[j]}" | sort | uniq)"
			if [ -z "$rpm32" ]; then
				if (( j+1 < ${#pat32[@]} )); then
					echo "[DEBUG] j: $j: trying another 32bit package pattern"
					continue 1
				else
					echo "[DEBUG] j: $j: 32bit package pattern not foun, searcho older repo..."
					continue 2
				fi
			fi
			if { swh_download https://dl.winehq.org/wine-builds/fedora/"${rel[i]}"/i686/"$rpm32"; }; then
				typeset down32=ok
				break
			else
				#cd ..
				#\rm -rf "$build"-downloading
				swh_error "${FUNCNAME[0]}: $downloader: download 32bit wine package failed"
			fi
		done

		# 6.2 download wine.x86_64.rpm
		if [[ "$pak_arch" == 'win64' ]]; then
			typeset buf64="$(swh_download -q https://dl.winehq.org/wine-builds/fedora/"${rel[i]}"/x86_64/)"
			[ -z "$buf64" ] && swh_error "${FUNCNAME[0]}: $downloader: get 64bit package list failed."
			typeset -i k
			for (( k=0; k < ${#pat64[@]}; k++ )); do
				typeset rpm64="$(echo "$buf64" | grep -Eo "${pat64[k]}" | sort | uniq)"
				if [ -z "$rpm64" ]; then
					if (( k+1 < ${#pat64[@]} )); then
						echo "[DEBUG] k: $k: trying another 64bit package pattern"
						continue 1
					else
						swh_error "${FUNCNAME[0]}: expected 64bit package not found"
					fi
				fi
				if { swh_download https://dl.winehq.org/wine-builds/fedora/"${rel[i]}"/x86_64/"$rpm64"; }; then
					typeset down64=ok
					break
				else
					#cd ..
					#\rm -rf "$build"-downloading
					swh_error "${FUNCNAME[0]}: $downloader :download 64bit wine package failed"
				fi
			done
		fi

		if [[ "$pak_arch" == 'win64' ]]; then
			[[ "$down32" == 'ok' && "$down64" == 'ok' ]] && break
		elif [[ "$pak_arch" == 'win32' ]]; then
			[[ "$down32" == 'ok' ]] && break
		fi

	done

	# 7. Download success?
	if [[ "$pak_arch" == 'win64' ]]; then
		[[ "$down32" == 'ok' && "$down64" == 'ok' ]] || swh_error "${FUNCNAME[0]}: Download winehq package arch=$WINEARCH failed"
	elif [[ "$pak_arch" == 'win32' ]]; then
		[[ "$down32" == 'ok' ]] || swh_error "${FUNCNAME[0]}: Download winehq package arch=$WINEARCH failed"
	fi

	# 8.extract rpm
	for f in ./*.rpm; do
		rpm2cpio "$f" | cpio -idmv
	done
	typeset src="$(find ./opt -mindepth 1 -maxdepth 1 -type d)" || swh_error "${FUNCNAME[0]}: can not find extracted wine dir"
	\mv "$src" ../"$build" || swh_error "${FUNCNAME[0]}: move wine dir failed"
	cd .. && \rm -rf "$build"-downloading
}

swh_init()
{
	export WINEVERPATH="$cellar/$build_arch/$build"
	[ -x "$WINEVERPATH/bin/wine" ] || swh_error "${FUNCNAME[0]}: $WINEVERPATH/bin/wine is missing or not executable, store wine to your own repository directory before use. try $SWH_LAUNCHER s"
	if [[ "$build_arch" == 'win64' ]]; then [ -x "$WINEVERPATH/bin/wine64" ] || swh_error "${FUNCNAME[0]}: \$build_arch set to wine64 but $WINEVERPATH/bin/wine64 is missing or not executable!"; fi;
	export WINEPREFIX="$table/$WINEARCH/$build/$prefix"
	[ -d "$WINEPREFIX" ] || mkdir -p "$WINEPREFIX"
	export PATH="$WINEVERPATH/bin:$PATH"
	export WINESERVER="$WINEVERPATH/bin/wineserver"
	export WINELOADER="$WINEVERPATH/bin/wine"
	export WINEDLLPATH="$WINEVERPATH/lib/wine/fakedlls"
	export LD_LIBRARY_PATH="$WINEVERPATH/lib:$LD_LIBRARY_PATH"
}

swh_checkprefix()
{
	[ -f "$table/$WINEARCH/$build/$prefix/user.reg" ] || swh_error "wineprefix dir is not created, or if your prefix is on a slow HDD, please wait some seconds and try again. To create it, try $SWH_LAUNCHER c"
}

# 3rd party dll package: dxvk, faudio
# usage : swh_3rd pakname command argument 
# 	pakname: { dxvk, faudio }
# 	command: { install, uninstall }
#	argument: --without-dxgi 		# use with dxvk 	https://github.com/doitsujin/dxvk
# install dir should contain these dir(s): "x86" "x64"

# is wine 5.3 or newer?
f_is_wine_53()
{
	swh_init
	# wine --version: wine-5.12 (Staging)
	OLDIFS="$IFS"
	IFS='-. ' v=( $( wine --version ) )
	IFS="$OLDIFS"
	if (( v[1] > 5 || v[1] == 5 && v[2] >= 3 )); then
		return 0
	else
		return 1
	fi
}

# is dxvk 1.6 or newer?
f_is_dxvk_16()
{
	# pattern
	# dxvk_install="$HOME/0_wine/dxvk/dxvk-1.5.5"	

	typeset dv="$( echo "$dxvk_install" | sed 's/.*\///g' | cut -d - -f 2 )"
	typeset major="$( echo "$dv" | cut -d . -f 1 )"
	typeset minor="$( echo "$dv" | cut -d . -f 2 )"
	if (( major > 1 || major == 1 && minor >= 6 )); then
		return 0
	else
		return 1
	fi
}

# Get both linux and windows style dirname; check if they are valid; if linux style, convert to windows style 
f_get_app_dir()
{
	# 1. windows style path
	if ( echo "${exe[i]}" | grep -E '^[A-Za-z]:\\.*$' - ); then
		wd="${exe[i]%\\*}"
		ld="$table/$WINEARCH/$build/$prefix/dosdevices/$( echo "${wd,[[:upper:]]}" | sed 's/\\/\//g' )"
		[ -d "$ld" ] || swh_error "${FUNCNAME[0]}: $ld : dir not found. Wrong windows style path? Check \${exe[i]} in launcher."
	# 2. linux style path, convert to windows style
	#    only understand dir in dosdevices: /home/me/swh/table/win64/5.6-staging/mb2/dosdevices/e:/appdir/game.exe
	elif ( echo "${exe[i]}" | grep -E '^/.*$' - ); then
		ld="$( dirname "${exe[i]}" )"
		[ -d "$ld" ] || swh_error "${FUNCNAME[0]}: $ld : dir not found. Wrong linux style path? Check \${exe[i]} in launcher."
		wd="$( echo "$ld" | sed -E 's/(.*\/)([a-z]:)(\/.*)/\2\3/g; s/\//\\/g' )"
		exe[i]="$wd\\${exe[i]##*/}"
	# 3. wrong path
	else
		swh_error "${FUNCNAME[0]}: \${exe[i]} do not look like valid windows or linux path, check launcher."
	fi
}

swh_3rdpak()
{
	swh_checkprefix
	
	[[ "$runner" =~ wine|wine64 ]] || swh_error "${FUNCNAME[0]}: wrong value in \$runner , must be wine or wine64"

	typeset pakname="$1"
	typeset cmd="$2"
	shift
	shift

	case $WINEARCH in
		win32)
			typeset dll32_path="$WINEPREFIX"/drive_c/windows/system32
			;;
		win64)
			typeset dll32_path="$WINEPREFIX"/drive_c/windows/syswow64
			typeset dll64_path="$WINEPREFIX"/drive_c/windows/system32
			;;
	esac

	case $pakname in
		dxvk)
			typeset idir="$dxvk_install"
			;;
		d9vk)
			typeset idir="$d9vk_install"
			;;
		faudio)
			typeset idir="$faudio_install"
			;;
		*)
			swh_error "${FUNCNAME[0]}: unknown 3rd party dll package name. currently supported: dxvk, faudio"
			;;
	esac

	case $cmd in
		i | install)
			! [ -f "$WINEPREFIX"/drive_c/swh-"$pakname".install ] || swh_error "${FUNCNAME[0]}: $pakname already installed."
			
			# is source file dir empty?
			if [ "$WINEARCH" == win32 ]; then typeset bit=32; fi
			if [ "$WINEARCH" == win64 ]; then typeset bit=64; fi
			if [ -z "$( ls -A "$idir"/x"$bit" )" ]; then swh_error "WINEARCH is $WINEARCH but $idir/$bit dir is empty!"; fi
			
			{ [[ "$pakname" == 'dxvk' ]] && [ -f "$WINEPREFIX"/drive_c/swh-d9vk.install ]; } && swh_error "${FUNCNAME[0]}: dxvk conflict with d9vk"
			{ [[ "$pakname" == 'd9vk' ]] && [ -f "$WINEPREFIX"/drive_c/swh-dxvk.install ]; } && swh_error "${FUNCNAME[0]}: d9vk conflict with dxvk"
			
			# method:
				#11: full install  ( old default method )
				#10: with dxgi.dll , no d3d10.dll d3d10_1.dll  ( dxvk 1.6+ and wine 5.3+ default method )
				#01: no dxgi.dll, with d3d10.dll d3d10_1.dll
				#00: no dxgi.dll , no d3d10.dll d3d10_1.dll

			typeset -i method=11
			
			if [ "$pakname" == 'dxvk' ]; then
				if ( f_is_wine_53 && f_is_dxvk_16 ); then
					typeset -i method=10
					while (($# > 0)); do
						case "$1" in
							"--without-dxgi")
								#with_dxgi=false
								method=$(( method-10 ))
								;;
							"--with-d3d10")
								#with_d3d10=true
								method=$(( method+1 ))
								;;
						esac
						shift
					done
				else
					typeset -i method=11
					if [ "$1" == "--without-dxgi" ]; then
						#with_dxgi=false
						method=$(( method-10 ))
					fi
				fi
			fi
			
			# generate file list
			typeset -a ar
			#readarray -t ar<<<"$( find "$idir"/x"$bit" -mindepth 1 -maxdepth 1 -type f -name '*.*' -printf %f\\n | LC_ALL=C sort)"
			while read -r -d ''; do
				ar+=("$REPLY")
			done < <(\
				case $method in
					11)
						find "$idir"/x"$bit" -mindepth 1 -maxdepth 1 -type f -name '*.*' -printf %f\\0
						;;
					10)
						find "$idir"/x"$bit" -mindepth 1 -maxdepth 1 -type f -name '*.*' \! -iname 'd3d10.dll' \! -iname 'd3d10_1.dll' -printf %f\\0
						;;
					01)
						find "$idir"/x"$bit" -mindepth 1 -maxdepth 1 -type f -name '*.*' \! -iname 'dxgi.dll' -printf %f\\0
						;;
					00)
						find "$idir"/x"$bit" -mindepth 1 -maxdepth 1 -type f -name '*.*' \! -iname 'dxgi.dll' \! -iname 'd3d10.dll' \! -iname 'd3d10_1.dll' -printf %f\\0
						;;
				esac
			)

			#debug
			printf "%s\n" "${ar[@]}"

			case "$WINEARCH" in
				win32)
					typeset -i i
					for (( i=0; i<${#ar[@]}; i++ )); do
						[ -f "$dll32_path"/"${ar[i]}" ] && \mv -f "$dll32_path"/"${ar[i]}" "$dll32_path"/"${ar[i]}"."$pakname"
						ln -s "$idir"/x32/"${ar[i]}" "$dll32_path"
						wine reg add 'HKEY_CURRENT_USER\Software\Wine\DllOverrides' /v "$( echo "${ar[i]}" | sed -En 's/\.[dD][lL][lL]$//gp' )" /d native /f 1 > /dev/null
					done
					;;
				win64)
					typeset -i i
					for (( i=0; i<${#ar[@]}; i++ )); do
						[ -f "$dll32_path"/"${ar[i]}" ] && \mv -f "$dll32_path"/"${ar[i]}" "$dll32_path"/"${ar[i]}"."$pakname"
						ln -s "$idir"/x32/"${ar[i]}" "$dll32_path"
						[ -f "$dll64_path"/"${ar[i]}" ] && \mv -f "$dll64_path"/"${ar[i]}" "$dll64_path"/"${ar[i]}"."$pakname"
						ln -s "$idir"/x64/"${ar[i]}" "$dll64_path"
						# use wine64 reg ?
						wine reg add 'HKEY_CURRENT_USER\Software\Wine\DllOverrides' /v "$( echo "*${ar[i]}" | sed -En 's/\.[dD][lL][lL]$//gp' )" /d native /f 1 > /dev/null
					done
					;;
			esac

			printf "%s\n" "${ar[@]}" > "$WINEPREFIX"/drive_c/swh-"$pakname".install
			;;
		u | uninstall)
			[ -f "$WINEPREFIX"/drive_c/swh-"$pakname".install ] || swh_error "$pakname is not installed"
			typeset -a aru
			readarray -t aru < "$WINEPREFIX"/drive_c/swh-"$pakname".install
			typeset -i j
			for (( j=0; j<${#aru[@]}; j++ )); do
				case "$WINEARCH" in
					win32)
						if [ -f "$dll32_path"/"${aru[j]}"."$pakname" ]; then
							\mv -f "$dll32_path"/"${aru[j]}"."$pakname" "$dll32_path"/"${aru[j]}"
						else
							\rm -f "$dll32_path"/"${aru[j]}"
						fi
						wine reg delete 'HKEY_CURRENT_USER\Software\Wine\DllOverrides' /v "$( echo "${aru[j]}" | sed -En 's/\.[dD][lL][lL]$//gp' )" /f 1 > /dev/null
						;;
					win64)
						if [ -f "$dll64_path"/"${aru[j]}"."$pakname" ]; then
							\mv -f "$dll32_path"/"${aru[j]}"."$pakname" "$dll32_path"/"${aru[j]}"
							\mv -f "$dll64_path"/"${aru[j]}"."$pakname" "$dll64_path"/"${aru[j]}"
						else
							\rm -f "$dll32_path"/"${aru[j]}"
							\rm -f "$dll64_path"/"${aru[j]}"
						fi
						wine reg delete 'HKEY_CURRENT_USER\Software\Wine\DllOverrides' /v "$( echo "*${aru[j]}" | sed -En 's/\.[dD][lL][lL]$//gp' )" /f 1 > /dev/null
						;;
				esac
			done
			\rm -f "$WINEPREFIX"/drive_c/swh-"$pakname".install
			;;
		*)
			swh_error "${FUNCNAME[0]}: unknown command, supported command: install, uninstall"
			;;
	esac
}

swh_objdump()
{
	(( $# == 1 )) || swh_error "allowed argument count : 1"
	case "$1" in
		[1-9] | [1-9][0-9])
			typeset -i i=$1
			typeset ldrv
			typeset ldf
			typeset lfn
			ldrv="$( echo "${exe[i]}" | cut -d : -f 1 | tr '[:upper:]' '[:lower:]' )"
			ldf="$( echo "${exe[i]}" | cut -d : -f 2- | tr $'\\' '/' )"
			lfn="$WINEPREFIX"/dosdevices/"$ldrv":"$ldf"
			[ -f "$lfn" ] || swh_error "file not found"
			printf "\nThis function use linux command \`file\` and \`objdump -p\` scan %s , help you decide proper WINEARCH and dll override\nTip: Reports each DLL as it's loaded using Debug Channels: WINEDEBUG=fixme-all,+loaddll\n\n" "${exe[i]}"
			file "$lfn"
			printf "\n"
			objdump -p "$lfn" | grep "DLL Name" | sort | sed -En 's/[[:blank:]]*DLL Name: //gp'
			;;
		*)
			swh_error "No exe to scan. usage example: 'launcher od 1'"
			;;
	esac
}

# clean open with list
swh_cowl()
{
	printf "\
\n\
Remove wine programs from your open with list?\n\
  Continue with the following commands?\n\n\
rm -f ~/.local/share/mime/packages/x-wine*\n\
rm -f ~/.local/share/applications/wine-extension*\n\
rm -f ~/.local/share/icons/hicolor/*/*/application-x-wine-extension*\n\
rm -f ~/.local/share/mime/application/x-wine-extension*\n\
\n\
"
	typeset ch
	read -r -p '(y/n)' ch
	if [[ "$ch" =~ Y|y ]]; then
		\rm -f ~/.local/share/mime/packages/x-wine*
		\rm -f ~/.local/share/applications/wine-extension*
		\rm -f ~/.local/share/icons/hicolor/*/*/application-x-wine-extension*
		\rm -f ~/.local/share/mime/application/x-wine-extension*
	fi
}

# Chinese fonts replacement: use google-noto-cjk ttc fonts
swh_ww_cnfonts_noto()
{
	swh_tempdir="$( mktemp -d "${TMPDIR:-/tmp}/swhtemp.XXXXXXXX" )"
	{ [ -d "$swh_tempdir" ] && [ -w "$swh_tempdir" ] ; } || swh_error "${FUNCNAME[0]}: mktemp error."
	verbfile='swh_ww_cnfonts_noto.verb'
	cat > "$swh_tempdir/$verbfile" <<'__EOF__'
w_metadata swh_ww_cnfonts_noto fonts \
    title="Creates aliases for Chinese fonts using NotoSansCJK-Regular.ttc and NotoSerifCJK-Regular.ttc" \
    publisher="Google" \
    year="2013"

load_swh_ww_cnfonts_noto()
{
    # Reference : https://en.wikipedia.org/wiki/Noto_fonts

    sdir=(/usr/share/fonts /usr/local/share/fonts $HOME/.fonts)
    idir='missing'
    for (( i=0; i < ${#sdir[*]}; i++ )); do
        if [ -f ${sdir[i]}/google-noto-cjk/NotoSansCJK-Regular.ttc ]; then
            idir=${sdir[i]}
        fi
    done

    if ! [ -f $idir/google-noto-cjk/NotoSansCJK-Regular.ttc ]; then
        w_die "NotoSansCJK-Regular.ttc not found."
    fi
    if ! [ -f $idir/google-noto-cjk/NotoSerifCJK-Regular.ttc ]; then
        w_die "NotoSerifCJK-Regular.ttc not found."
    fi

    content_dir=(google-noto-cjk)
    for (( i=0; i < ${#content_dir[*]}; i++ )); do
        w_try_cp_font_files "$idir/${content_dir[i]}" "$W_FONTSDIR_UNIX" "*.ttc"
    done
    w_register_font NotoSansCJK-Regular.ttc "Noto Sans CJK JP Regular & Noto Sans CJK KR Regular & Noto Sans CJK SC Regular & Noto Sans CJK TC Regular & Noto Sans Mono CJK JP Regular & Noto Sans Mono CJK KR Regular & Noto Sans Mono CJK SC Regular & Noto Sans Mono CJK TC Regular"

    w_register_font NotoSerifCJK-Regular.ttc "Noto Serif CJK JP & Noto Serif CJK KR & Noto Serif CJK SC & Noto Serif CJK TC"
    
    w_register_font_replacement "FangSong" "Noto Serif CJK SC"
    w_register_font_replacement "Microsoft YaHei" "Noto Sans CJK SC Regular"
    w_register_font_replacement "NSimSun" "Noto Sans CJK SC Regular"
    w_register_font_replacement "SimHei" "Noto Sans CJK SC Regular"
    w_register_font_replacement "SimKai" "Noto Serif CJK SC"
    w_register_font_replacement "SimSun" "Noto Sans CJK SC Regular"
    w_register_font_replacement "SimSun-ExtB" "Noto Sans CJK SC Regular"
    w_register_font_replacement "KaiTi" "Noto Serif CJK SC"
    w_register_font_replacement "Microsoft YaHei UI" "Noto Sans CJK SC Regular"
    w_register_font_replacement "Dengxian" "Noto Sans CJK SC Regular"
    w_register_font_replacement "DFKai-SB" "Noto Serif CJK TC"
    w_register_font_replacement "Microsoft JhengHei" "Noto Sans CJK TC Regular"
    w_register_font_replacement "MingLiU" "Noto Serif CJK TC"
    w_register_font_replacement "PMingLiU" "Noto Serif CJK TC"
    w_register_font_replacement "MingLiU-ExtB" "Noto Sans CJK TC Regular"
    w_register_font_replacement "PMingLiU-ExtB" "Noto Sans CJK TC Regular"
    w_register_font_replacement "Microsoft JhengHei UI" "Noto Sans CJK TC Regular"
}
__EOF__
	winetricks "$swh_tempdir/$verbfile"
	\rm -rf "$swh_tempdir"
}

swh_help()
{
	cat <<__EOF__
Simple Wine Helper $SWH_VERSION

Usage: APP_LAUNCHER COMMAND [argument]

Commands:

s                           Store wine to your cellar dir

c                           Run winecfg, Create wineprefix

d                           Download wine from winehq fedora repository, please use valid value in \$build like: 4.5 ; 4.5-staging ; 3.0.5 ; 4.0-rc7 . before use this feature, make sure you have satisfied wine dependencies

i                           Inherit old profile files, useful when upgrading from old frefixes: copy these dirs from one old prefix to current prefix: 'C:\users\USERNAME\AppData' 'C:\users\USERNAME\Application Data' 'C:\users\USERNAME\Local Settings'

dr DISK DOSDRIVELETTER         varible DISK is defined in swh_profile
  1 d                             create shared drive D: on disk 1. Files in this dir is visable by all wine prefixes, if it has executed `dr 1 d`
  1 e                             create drive E: on disk 1. Files in this dir is visable by prefixes which have same \$prefix value, if it has executed `dr 1 e`

r [registry file]           Run regedit [regfile]

l [application]             Launch specified application: see Examples below
1                           Launch 1st application
2                           Launch 2nd application
99                          Launch 99th application, swh now supports up to 99 apps in one launcher!

w [winetricks command]      winetricks command

wf                          fonts override, use native windows 'Fonts' dir

ww [swh command]            swh command, these commands need winetricks as dependency, but they are NOT winetricks command
  cnfonts                       (EXPERIMENTIAL FUNCTION) don't use
  (ALL OTHER EXPERIMENTIAL FUNCTIONS REMOVED, PLEASE USE WINETRICKS)

3rd dxvk i                  Install dxvk 0.5x-1.6 ( create symbolic link )
3rd dxvk i --without-dxgi   Same as above, without-dxgi see https://github.com/doitsujin/dxvk
3rd dxvk i --with-d3d10     Same as above, with-d3d10 see https://github.com/doitsujin/dxvk
3rd dxvk u                  Uninstall dxvk
3rd faudio i                Install faudio
3rd faudio u                Uninstall faudio

cleanopenwith | cow         Clean the Open With List

NO argument                 Show application menu


Examples:
  LAUNCHER l 'C:\a b\xy.exe'    Run specified application
  LAUNCHER l cmd                Wine cmd
  LAUNCHER l control            Wine Control Panel
  LAUNCHER w d3dcompiler_47     Call winetricks, it installs d3dcompiler_47 override

Quick Guide:
1A. Install wine into a SEPERATE directory:
  Use official winehq repository:
    wine should be installed in directory like: '/opt/wine-stable', '/opt/wine-devel', '/opt/wine-staging'
    Your distro may install their wine package into non-seperate dir like /usr/bin , this is not supported
  Build wine yourself:
    modify wine's configure argument: configure --prefix="SEPERATE_INSTALL_DIR"
    copy your built wine to \$cellar (default location is '\$HOME/swh/cellar')
    valid winecfg path example: '$HOME/swh/cellar/win64/4.0-rc6-staging/bin/winecfg'
  This directory should contain these dirs: bin lib lib64

1B. If you are using Fedora
  Install wine dependency
  use `LAUNCHER d` command download wine from winehq directly

2. Install swh and winetricks, perferred dir is '\$HOME/bin', modify your .bashrc file add it to '\$PATH'

3. Make a copy of example_launcher. Rename it to "your_launcher" and modify settings

4. (For 1A path only) Store wine into your cellar dir: your_launcher s

5. Create wineprefix: your_launcher c

6. "your_app_launcher" modify example:
    modify \$prefix as comment suggest
    modify \$build as comment suggest
    modify \$install as comment suggest
    modify \$WINEARCH  as comment suggest
    exe[1]='C:\your_app_dir\example.exe'  This is full path of your exe
  run command "chmod u+x your_launcher" make it executable
  Use command "your_launcher 1" to launch example.exe

7. Tweak advanced settings via winetricks: your_launcher w

NOTE:

1. Using winetricks: "Select the default wineprefix" means select THIS wineprefix
2. This script is used per user, not "Install on this machine for everyone" because many command use username as argument
__EOF__
}

#main()
#{
( uname -s | grep -i "Linux" > /dev/null 2>&1 ) || swh_error "This script runs on Linux!"
(( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] >= 2 || BASH_VERSINFO[0] > 4 )) || \
	{
		printf "This script need bash version 4.2 or higher.\n" >&2;
		exit 1;
	}
[ -v SWH_LAUNCHER ] || \
	{
		printf "No launcher or launcher too old, please remake launcher\n";
		swh_pause;
		swh_help;
		exit 1;
	}

swh_config
if (( $# > 0 )); then
	case "$1" in
	l)
		swh_init
		swh_checkprefix
		if (( $# >= 2 )); then
			shift
			if [ -z "$invoker" ]; then
				"$runner" "$@"
			else
				if [ -z "$invoker_args_str" ]; then
					"$invoker" "$runner" "$@"
				else
					#shellcheck disable=2086
					"$invoker" $invoker_args_str "$runner" "$@"
				fi
			fi
		else
			swh_help
		fi
		;;
	[1-9] | [1-9][0-9])
		# TODO:	 runas feature not supported now
		# invoker invoker_args_str runner runas_str exe[i] args[i]
		# strace --e trace=open,openat wine runas /trustlevel:0x20000 cmd /c start /unix 'C:\Program Files (x86)\Example Software\example.exe' -arg1 -arg2
		# strace --e trace=open,openat wine example.exe -arg1 -arg2
		# EXPECTING QUOTING ISSUE !
		swh_init
		swh_checkprefix
		i=$1
		[ -n "${exe[i]}" ] || swh_error "no such exe"
		# cd into exe dir, regardless use or not use winestart /d
		wd=''
		ld=''
		f_get_app_dir && cd "$ld"

		#echo wd="$wd"
		#echo ld="$ld"
		#pwd

		if [ X"$use_winestart" == X'true' ];then
			if [ -z "$invoker" ]; then
				#shellcheck disable=2086
				"$runner" start /d "$wd" "${exe[i]}" ${args[i]}
			else
				if [ -z "$invoker_args_str" ]; then
					#shellcheck disable=2086
					"$invoker" "$runner" start /d "$wd" "${exe[i]}" ${args[i]}
				else
					#shellcheck disable=2086
					"$invoker" $invoker_args_str "$runner" start /d "$wd" "${exe[i]}" ${args[i]}
				fi
			fi
		else
			if [ -z "$invoker" ]; then
				#shellcheck disable=2086
				"$runner" "${exe[i]}" ${args[i]}
			else
				if [ -z "$invoker_args_str" ]; then
					#shellcheck disable=2086
					"$invoker" "$runner" "${exe[i]}" ${args[i]}
				else
					#shellcheck disable=2086
					"$invoker" $invoker_args_str "$runner" "${exe[i]}" ${args[i]}
				fi
			fi
		fi
		;;
	netv | --netfx_setupverifier)
		swh_init
		swh_checkprefix
		"$runner" netfx_setupverifier.exe
		;;
	s)
		swh_storewine
		;;
	d)
		swh_dlwine
		;;
	c)
		swh_init
		wine winecfg
		;;
	i)
		swh_init
		swh_checkprefix
		typeset -a ar
		if { printf "%s\n" "$prefix" | grep "-" ; }; then
			temp_var=$( printf "%s\n" "$prefix" | sed -En 's/-.*$//gp' )
		else
			temp_var="$prefix"
		fi
		readarray -t -n 40 ar<<<"$( find "$table" -mindepth 3 -maxdepth 3 -type d -name "$temp_var*" -print | grep -vx "$WINEPREFIX" )"
		# ${#ar[@]} always >= 1
		if [ -n "${ar[0]}" ]; then
			printf "\nYour current prefix is:\n%s\n\nInherit profile files from which old prefix?\n\n" "$WINEPREFIX"
			select op in "${ar[@]}" quit; do
				[ X"$op" == X'quit' ] && break
				me="$( whoami )"
				opd="$op/drive_c/users/$me"
				opf=("$opd/AppData" "$opd/Application Data" "$opd/Local Settings")
				npd="$WINEPREFIX/drive_c/users/$me"
				for (( i=0; i < ${#opf[@]}; i++ )); do
					\cp -fprv "${opf[i]}" "$npd"
				done
				break
			done
		else
			swh_error "Can not inherit: No prefix with same name found."
		fi
		;;
	# cdr disk drive
	# cdr 1 e        # create a dir on disk 1, mount as drive e
	dr | cdr)
		shift
		swh_init
		swh_checkprefix
		(( $# == 2 )) || swh_error "Wrong argument count."
		typeset input="$1"
		typeset -i i=$(( input )) || swh_error "Illegal argument."
		[ -d "${disk[i]}" ] || swh_error "${disk[i]} : No such dir, check swh_profile."
		typeset drive="$( echo "$2" | tr '[:upper:]' '[:lower:]' )"
		[[ $drive =~ [d-z] ]] || swh_error "Invalid drive letter."

		cd "$WINEPREFIX"/dosdevices || swh_error "cd dosdevices failed"
		#! [ -L "./$drive:" ] || swh_quit "Drive $drive already mounted as $( readlink -m ./$drive: ) ."
		if [[ "$drive" == 'd' ]]; then
			mkdir -p "${disk[i]}/$drive:"
			ln -sf "${disk[i]}/$drive:" "$drive:"
		else
			mkdir -p "${disk[i]}/$prefix/$drive:"
			ln -sf "${disk[i]}/$prefix/$drive:" "$drive:"
		fi
		;;
	r | --regedit)
		swh_init
		swh_checkprefix
		if [ -f "$2" ]; then
			regedit "$2"
		else
			regedit
		fi
		;;
	w | --winetricks)
		swh_checkdependency winetricks
		swh_init
		swh_checkprefix
		if (( $# == 1 )); then
			winetricks
		else
			shift
			winetricks "$@"
		fi
		;;
	wf | --windowsfonts)
		
		swh_init
		swh_checkprefix
		if (( $# != 2 )); then swh_error "wrong argument"; fi
		shift
		typeset cmd="$1"
		case "$cmd" in
			i | install)
				if ! [ -d "$windowsfonts"  ]; then swh_error "$windowsfonts dir not exist."; fi
				cd "$WINEPREFIX"/dosdevices/c:/windows
				if [ -d ./Fonts.wine ]; then
					printf "Windows Fonts already used, nothing to do.\n"
				else
					\mv ./Fonts ./Fonts.wine
					ln -s "$windowsfonts" ./Fonts
				fi
				;;
			u | uninstall)
				cd "$WINEPREFIX"/dosdevices/c:/windows
				if [ -d ./Fonts.wine ]; then
					\rm -rf ./Fonts
					\mv ./Fonts.wine ./Fonts 
				else
					printf "You are not using windows fonts, nothing to do.\n"
				fi
				;;
			*)
				swh_error "wrong argument, supported argument: i , u"
				;;
		esac
		;;
	# test only 
	ww )
		swh_init
		swh_checkprefix
		if (( $# == 2 )); then
			shift
			case "$1" in
				cnfonts | cnfonts_noto)
					swh_ww_cnfonts_noto
					;;
				*)
					swh_error "unknown argument."
					;;
			esac
		else
			swh_error "wrong argument."
		fi
		;;
	3rd | 3rdpak)
		swh_init
		swh_checkprefix
		if [[ (( $# == 3 )) || (( $# == 4 )) ]]; then
			shift
			swh_3rdpak "$1" "$2" "$3"
		else
			swh_error "wrong argument number."
		fi
		;;
	cleanopenwithlist | cowl | cow)
		swh_cowl
		;;
	objdump | od)
		swh_init
		swh_checkprefix
		swh_objdump "$2"
		;;
	h | -h | --help)
		swh_help
		;;
	--version)
		printf "swh-%s\n" "$SWH_VERSION"
		;;
	*)
		swh_error "unknown command"
		;;
	esac
else
	#run launcher without command will show menu
	swh_init
	swh_checkprefix
	select item in "${exe[@]}" help quit; do
		i=$REPLY
		if [ X"$item" == X"help" ]; then swh_help; break; fi
		if [ X"$item" == X"quit" ]; then break; fi
		[ -n "${exe[i]}" ] || { break; swh_error "no such exe"; }
		# cd into exe dir, regardless use or not use winestart /d
		wd=''
		ld=''
		f_get_app_dir && cd "$ld"
		if [ X"$use_winestart" == X'true' ];then
			if [ -z "$invoker" ]; then
				#shellcheck disable=2086
				"$runner" start /d "$wd" "${exe[i]}" ${args[i]}
			else
				if [ -z "$invoker_args_str" ]; then
					#shellcheck disable=2086
					"$invoker" "$runner" start /d "$wd" "${exe[i]}" ${args[i]}
				else
					#shellcheck disable=2086
					"$invoker" $invoker_args_str "$runner" start /d "$wd" "${exe[i]}" ${args[i]}
				fi
			fi
		else
			if [ -z "$invoker" ]; then
				#shellcheck disable=2086
				"$runner" "${exe[i]}" ${args[i]}
			else
				if [ -z "$invoker_args_str" ]; then
					#shellcheck disable=2086
					"$invoker" "$runner" "${exe[i]}" ${args[i]}
				else
					#shellcheck disable=2086
					"$invoker" $invoker_args_str "$runner" "${exe[i]}" ${args[i]}
				fi
			fi
		fi
		break;
	done
fi
#}
