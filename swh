#!/bin/bash
# shellcheck disable=2154
set -e

SWH_VERSION=2.6.3

# This is a UTF-8 file
# You should see an o with two dots over it here [ö]
# You should see a micro (u with a tail) here [µ]
# You should see a trademark symbol here [™]

#	Simple Wine Helper (SWH)
#
#		Command-line interface wrapper for wine
#

#	Copyright (C) 2017-2019 佟大维 <tim110011!163.com>
#
#	License:
#		This program is free software; you can redistribute it and/or
#		modify it under the terms of the GNU Lesser General Public
#		License as published by the Free Software Foundation; either
#		version 2.1 of the License, or (at your option) any later
#		version.
#
#		This program is distributed in the hope that it will be useful,
#		but WITHOUT ANY WARRANTY; without even the implied warranty of
#		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#		GNU Lesser General Public License for more details.
#
#		You should have received a copy of the GNU Lesser General Public
#		License along with this program.  If not, see
#		<https://www.gnu.org/licenses/>.

swh_config()  # swh default value, modify me
{
	export cellar="$HOME/swh/cellar"				# store wine here
	export table="$HOME/swh/table"					# wineprefix dirs cluster
	export drives="$HOME/swh/drives"				# wine drives dir
	export WINEDEBUG=fixme-all
}

swh_error()
{
	printf "swh ERROR: %s\n" "$*" >&2
	exit 1
}

swh_pause()
{
	read -r -p 'Press any key to continue...' temp_var
	unset temp_var
}

swh_check_dependencies()
{
	{ command -v winetricks >/dev/null; } || { printf "WARN: winetricks not installed!"; swh_pause; }
}

swh_storewine()
{
	[ -x "$install/bin/wine" ] || swh_error "\$install/bin/wine is missing or not executable. \$install in your launcher have wrong value or winehq not installed"
	{ [ X"$build_arch" == X"win64" ] && [ -x "$install/bin/wine64" ] ; } || swh_error "\$build_arch set to wine64 but \$install/bin/wine64 is missing or not executable!"
	local lbn
	local lwdst
	lbn=$( wine --version | tr "[:upper:]" "[:lower:]" | cut -d - -f 2- | tr -d "()" | tr " " "-" )
	lwdst="$cellar/$build_arch/$lbn"
	if ! [ -x "$lwdst/bin/wine" ] ; then
		mkdir -p "$lwdst"
		\cp -rfv "$install"/* "$lwdst"
	else
		printf "%s exists, nothing to do.\n" "$lwdst"
	fi
	unset -v lbn
	unset -v lwdst
}

swh_init()
{
	export WINEVERPATH="$cellar/$build_arch/$build"
	[ -x "$WINEVERPATH/bin/wine" ] || swh_error "$WINEVERPATH/bin/wine is missing or not executable, store wine to your own repository directory before use. try $SWH_LAUNCHER s"
	{ [ X"$build_arch" == X"win64" ] && [ -x "$WINEVERPATH/bin/wine64" ] ; } || swh_error "\$build_arch set to wine64 but $WINEVERPATH/bin/wine64 is missing or not executable!"
	export WINEPREFIX="$table/$WINEARCH/$build/$prefix"
	[ -d "$WINEPREFIX" ] || mkdir -p "$WINEPREFIX"
	export PATH="$WINEVERPATH/bin:$PATH"
	export WINESERVER="$WINEVERPATH/bin/wineserver"
	export WINELOADER="$WINEVERPATH/bin/wine"
	export WINEDLLPATH="$WINEVERPATH/lib/wine/fakedlls"
	export LD_LIBRARY_PATH="$WINEVERPATH/lib:$LD_LIBRARY_PATH"
}

swh_checkprefix()
{
	[ -f "$table/$WINEARCH/$build/$prefix/user.reg" ] || swh_error "wineprefix dir does not exist, explicit create it. try $SWH_LAUNCHER c"
}

## work with winetricks, use .verb file
# d3dcompiler_42, 32bit and 64bit
swh_ww_d3dcompiler_42()
{
	swh_tempdir="$( mktemp -d "${TMPDIR:-/tmp}/swhtemp.XXXXXXXX" )"
	{ [ -d "$swh_tempdir" ] && [ -w "$swh_tempdir" ] ; } || swh_error "${FUNCNAME[0]}: mktemp error."
	verbfile='swh_ww_d3dcompiler_42.verb'
	cat > "$swh_tempdir/$verbfile" <<'__EOF__'
w_metadata swh_ww_d3dcompiler_42 dlls \
	title="MS d3dcompiler_42.dll (Simple Wine Helper)" \
	publisher="Microsoft" \
	year="2010" \
	media="download" \
	file1="../directx9/directx_Jun2010_redist.exe" \
	installed_file1="$W_SYSTEM32_DLLS_WIN/d3dcompiler_42.dll" \

load_swh_ww_d3dcompiler_42()
{
	dllname=d3dcompiler_42

	helper_directx_Jun2010

	w_try_cabextract -d "$W_TMP" -L -F "*$dllname*x86*" "$W_CACHE"/directx9/$DIRECTX_NAME
	for x in "$W_TMP"/*.cab; do
		w_try_cabextract -d "$W_SYSTEM32_DLLS" -L -F "$dllname.dll" "$x"
	done
	if test "$W_ARCH" = "win64"; then
		w_try_cabextract -d "$W_TMP" -L -F "*$dllname*x64*" "$W_CACHE"/directx9/$DIRECTX_NAME
		for x in "$W_TMP"/*x64.cab
		do
			w_try_cabextract -d "$W_SYSTEM64_DLLS" -L -F "$dllname.dll" "$x"
		done
	fi

	w_override_dlls native $dllname
}
__EOF__
	winetricks "$swh_tempdir/$verbfile"
	rm -rf "$swh_tempdir"
}

## extract dotnet40 on 64bit prefix
# note: winetricks use sha256sum to verify file, list use sha1sum
swh_ww_dotnet40extract()
{
	swh_tempdir="$( mktemp -d "${TMPDIR:-/tmp}/swhtemp.XXXXXXXX" )"
	{ [ -d "$swh_tempdir" ] && [ -w "$swh_tempdir" ] ; } || swh_error "${FUNCNAME[0]}: mktemp error."
	verbfile='swh_ww_dotnet40extract.verb'
	cat > "$swh_tempdir/$verbfile" <<'__EOF__'
w_metadata swh_ww_dotnet40extract dlls \
	title="Microsoft .NET Framework 4 extract (Simple Wine Helper)" \
	publisher="Microsoft" \
	year="2011" \
	media="download" \
	conflicts="dotnet20 dotnet20sdk dotnet20sp1 dotnet20sp2 dotnet35sp1 dotnet40 dotnet46 dotnet461 dotnet462 vjrun20" \
	file1="dotNetFx40_Full_x86_x64.exe" \
	destlist="dotnet40list" \
	installed_file1="c:/windows/swh_ww_dotnet40extract.installed.workaround" \

load_swh_ww_dotnet40extract()
{
	if [ X"$WINEARCH" != X'win64' ]; then
		w_die "This function is made for 64bit wineprefix."
	fi
	if [ X"$runner" == X'wine' ]; then
		export runner=wine64
		printf "[warn]: runner=wine64\n"
	fi

	w_download https://download.microsoft.com/download/9/5/A/95A9616B-7A37-4AF6-BC36-D6EA96C8DAAE/dotNetFx40_Full_x86_x64.exe 65e064258f2e418816b304f646ff9e87af101e4c9552ab064bb74d281c38659f
	w_download https://raw.githubusercontent.com/tim110011/Simple-Wine-Helper/master/dotnet40list f1dfa277882c6963fc17d4e5dba7449e47cf8f300ec56f517227b6f036a01b97
	w_call remove_mono

	w_try_cd "$W_TMP"
	mkdir exedir
	mkdir netfx_all
	w_try_7z "$W_TMP"/exedir "$W_CACHE"/$W_PACKAGE/$file1
	w_try_7z "$W_TMP"/netfx_all "$W_TMP"/exedir/netfx_Core.mzz
	w_try_7z "$W_TMP"/netfx_all "$W_TMP"/exedir/netfx_Extended.mzz

	w_try_cd "$W_TMP"/netfx_all
	sha1sum * >../sourcelist.txt

	exec 0<"$W_CACHE/$W_PACKAGE/$destlist"
	while read line; do
		sha1sumkey=$( printf "%s\n" $line | cut -d' ' -f 1 )
		destwindows=$( printf "%s\n" $line | cut -d' ' -f 2- )
		sourcefile=$( grep -w -m 1 $sha1sumkey "$W_TMP"/sourcelist.txt | cut -d' ' -f 3- )
		if [ "$sourcefile" ]; then
			destdir="$( dirname "$WINEPREFIX/$destwindows" )"
			if ! [ -d "$destdir" ]; then
				mkdir -p "$destdir"
			fi
			\cp -rfv "$sourcefile" "$WINEPREFIX/$destwindows"
		else
			printf "[warn]: missing file: %s %s\n" $sha1sumkey $destwindows
		fi
	done

	w_override_dlls native mscoree

	"$runner" reg add "HKLM\\Software\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full" /v Install /t REG_DWORD /d 0001 /f
	"$runner" reg add "HKLM\\Software\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full" /v Version /t REG_SZ /d "4.0.30319" /f

	w_try touch "${W_WINDIR_UNIX}/swh_ww_dotnet40extract.installed.workaround"

}

__EOF__
	winetricks "$swh_tempdir/$verbfile"
	rm -rf "$swh_tempdir"
}

## extract dotnet472 on 64bit prefix, run after ww dotnet40, dot not call remove_mono
# note: winetricks use sha256sum to verify file, list use sha1sum
swh_ww_dotnet472extract()
{
	swh_tempdir="$( mktemp -d "${TMPDIR:-/tmp}/swhtemp.XXXXXXXX" )"
	{ [ -d "$swh_tempdir" ] && [ -w "$swh_tempdir" ] ; } || swh_error "${FUNCNAME[0]}: mktemp error."
	verbfile='swh_ww_dotnet472extract.verb'
	cat > "$swh_tempdir/$verbfile" <<'__EOF__'
w_metadata swh_ww_dotnet472extract dlls \
	title="Microsoft .NET Framework 4.7.2 extract (Simple Wine Helper)" \
	publisher="Microsoft" \
	year="2018" \
	media="download" \
	conflicts="" \
	file1="NDP472-KB4054530-x86-x64-AllOS-ENU.exe" \
	destlist="dotnet472list"
	installed_file1="c:/windows/swh_ww_dotnet472extract.installed.workaround" \

load_swh_ww_dotnet472extract()
{

	if [ X"$WINEARCH" != X'win64' ]; then
		w_die "This function is made for 64bit wineprefix."
	fi
	if [ X"$runner" == X'wine' ]; then
		export runner=wine64
		printf "[warn]: runner=wine64\n"
	fi

	w_download https://download.microsoft.com/download/6/E/4/6E48E8AB-DC00-419E-9704-06DD46E5F81D/NDP472-KB4054530-x86-x64-AllOS-ENU.exe c908f0a5bea4be282e35acba307d0061b71b8b66ca9894943d3cbb53cad019bc
	w_download https://raw.githubusercontent.com/tim110011/Simple-Wine-Helper/master/dotnet472list 24d257c079aaf070ce9928beda53da19719164c1af6853e69c769895eec252ac

	w_try_cd "$W_TMP"
	mkdir exedir
	mkdir netfx_all

	w_try_7z "$W_TMP"/exedir "$W_CACHE"/$W_PACKAGE/$file1
	w_try_7z "$W_TMP"/netfx_all "$W_TMP"/exedir/netfx_Full.mzz

	w_try_cd "$W_TMP"/netfx_all
	sha1sum * >../sourcelist.txt

	exec 0<"$W_CACHE/$W_PACKAGE/$destlist"
	while read line; do
		sha1sumkey=$( printf "%s\n" $line | cut -d' ' -f 1 )
		destwindows=$( printf "%s\n" $line | cut -d' ' -f 2- )
		sourcefile=$( grep -w -m 1 $sha1sumkey "$W_TMP"/sourcelist.txt | cut -d' ' -f 3- )
		if [ "$sourcefile" ]; then
			destdir="$( dirname "$WINEPREFIX/$destwindows" )"
			if ! [ -d "$destdir" ]; then
				mkdir -p "$destdir"
			fi
			\cp -rfv "$sourcefile" "$WINEPREFIX/$destwindows"
		else
			printf "[warn]: missing file: %s %s\n" $sha1sumkey $destwindows
		fi
	done

	w_override_dlls native mscoree

	"$runner" reg add "HKLM\\Software\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full" /v Install /t REG_DWORD /d 0001 /f
	"$runner" reg add "HKLM\\Software\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full" /v Version /t REG_SZ /d "4.0.30319" /f

	w_try touch "${W_WINDIR_UNIX}/swh_ww_dotnet472extract.installed.workaround"

}

__EOF__
	winetricks "$swh_tempdir/$verbfile"
	rm -rf "$swh_tempdir"
}

# xact, 32bit and 64bit
swh_ww_xact()
{
	swh_tempdir="$( mktemp -d "${TMPDIR:-/tmp}/swhtemp.XXXXXXXX" )"
	{ [ -d "$swh_tempdir" ] && [ -w "$swh_tempdir" ] ; } || swh_error "${FUNCNAME[0]}: mktemp error."
	verbfile='swh_ww_xact.verb'
	cat > "$swh_tempdir/$verbfile" <<'__EOF__'
w_metadata swh_ww_xact dlls \
	title="MS XACT Engine (Simple Wine Helper)" \
	publisher="Microsoft" \
	year="2010" \
	media="download" \
	file1="../directx9/directx_Jun2010_redist.exe" \
	installed_file1="$W_SYSTEM32_DLLS_WIN/xactengine2_0.dll"

load_swh_ww_xact()
{
	helper_directx_Jun2010

	rm -rf "$W_TMP"/cab
	mkdir -p "$W_TMP"/cab
	cabcab=(*XACT_x* *XAudio_x* *X3DAudio_x*)
	for (( i=0; i < ${#cabcab[*]}; i++ )); do
		cabextract -q -d "$W_TMP"/cab -L -F ${cabcab[i]} "$W_CACHE/directx9/$DIRECTX_NAME"
	done

	rm -rf "$W_TMP"/32
	mkdir -p "$W_TMP"/32
	for cab32 in "$W_TMP"/cab/*_x86.cab ; do
		cabextract -q -d "$W_TMP"/32 -L -F '*.dll' "$cab32"
	done
	cp -f "$W_TMP"/32/* "$W_SYSTEM32_DLLS"
	for swh_dllname in $( ls -1 "$W_TMP"/32 | sed -En 's/\.dll$//gp' ); do
		w_override_dlls native $swh_dllname
	done
	rm -rf "$W_TMP"/32

	if test "$W_ARCH" = "win64" ; then
		rm -rf "$W_TMP"/64
		mkdir -p "$W_TMP"/64
		for cab64 in "$W_TMP"/cab/*_x64.cab ; do
			cabextract -q -d "$W_TMP"/64 -L -F '*.dll' "$cab64"
		done
		cp -f "$W_TMP"/64/* "$W_SYSTEM64_DLLS"
		for swh_dllname in $( ls -1 "$W_TMP"/64 | sed -En 's/\.dll$//gp' ); do
			w_override_dlls native $swh_dllname
		done
		rm -rf "$W_TMP"/64
	fi

	rm -rf "$W_TMP"/cab
}
__EOF__
	winetricks "$swh_tempdir/$verbfile"
	rm -rf "$swh_tempdir"
}

# Chinese fonts replacement: use source fonts
swh_ww_cnfonts()
{
	swh_tempdir="$( mktemp -d "${TMPDIR:-/tmp}/swhtemp.XXXXXXXX" )"
	{ [ -d "$swh_tempdir" ] && [ -w "$swh_tempdir" ] ; } || swh_error "${FUNCNAME[0]}: mktemp error."
	verbfile='swh_ww_cnfonts.verb'
	cat > "$swh_tempdir/$verbfile" <<'__EOF__'
w_metadata swh_ww_cnfonts fonts \
    title="Creates aliases for Chinese fonts using Source Han Sans and Source Han Serif" \
    publisher="Adobe, Google" \
    year="2014, 2017"

load_swh_ww_cnfonts()
{
    # Reference : https://en.wikipedia.org/wiki/Source_Han_Sans
    # https://en.wikipedia.org/wiki/Source_Han_Serif

    sdir=(/usr/share/fonts /usr/local/share/fonts $HOME/.fonts)
    idir='missing'
    for (( i=0; i < ${#sdir[*]}; i++ )); do
        if [ -f ${sdir[i]}/adobe-source-han-sans-cn/SourceHanSansCN-Regular.otf ]; then
            idir=${sdir[i]}
        fi
    done

    if ! [ -f $idir/adobe-source-han-sans-cn/SourceHanSansCN-Regular.otf ]; then
        w_die "SourceHanSansCN-Regular.otf not found."
    fi
    if ! [ -f $idir/adobe-source-han-serif-cn/SourceHanSerifCN-Regular.otf ]; then
        w_die "SourceHanSerifCN-Regular.otf not found."
    fi
    if ! [ -f $idir/adobe-source-han-sans-tw/SourceHanSansTW-Regular.otf ]; then
        w_die "SourceHanSansTW-Regular.otf not found."
    fi
    if ! [ -f $idir/adobe-source-han-serif-tw/SourceHanSerifTW-Regular.otf ]; then
        w_die "SourceHanSerifTW-Regular.otf not found."
    fi

    content_dir=(adobe-source-han-sans-cn adobe-source-han-sans-tw adobe-source-han-serif-cn adobe-source-han-serif-tw)
    for (( i=0; i < ${#content_dir[*]}; i++ )); do
        w_try_cp_font_files "$idir/${content_dir[i]}" "$W_FONTSDIR_UNIX" "*.otf"
    done
    w_register_font SourceHanSansCN-Regular.otf "Source Han Sans CN"
    w_register_font SourceHanSerifCN-Regular.otf "Source Han Serif CN"
    w_register_font SourceHanSansTW-Regular.otf "Source Han Sans TW"
    w_register_font SourceHanSerifTW-Regular.otf "Source Han Serif TW"
    w_register_font_replacement "FangSong" "Source Han Serif CN"
    w_register_font_replacement "Microsoft YaHei" "Source Han Sans CN"
    w_register_font_replacement "NSimSun" "Source Han Serif CN"
    w_register_font_replacement "SimHei" "Source Han Sans CN"
    w_register_font_replacement "SimKai" "Source Han Serif CN"
    w_register_font_replacement "SimSun" "Source Han Serif CN"
    w_register_font_replacement "SimSun-ExtB" "Source Han Serif CN"
    w_register_font_replacement "KaiTi" "Source Han Serif CN"
    w_register_font_replacement "Microsoft YaHei UI" "Source Han Sans CN"
    w_register_font_replacement "Dengxian" "Source Han Sans CN"
    w_register_font_replacement "DFKai-SB" "Source Han Serif TW"
    w_register_font_replacement "Microsoft JhengHei" "Source Han Sans TW"
    w_register_font_replacement "MingLiU" "Source Han Serif TW"
    w_register_font_replacement "PMingLiU" "Source Han Serif TW"
    w_register_font_replacement "MingLiU-ExtB" "Source Han Sans TW"
    w_register_font_replacement "PMingLiU-ExtB" "Source Han Sans TW"
    w_register_font_replacement "Microsoft JhengHei UI" "Source Han Sans TW"
}
__EOF__
	winetricks "$swh_tempdir/$verbfile"
	rm -rf "$swh_tempdir"
}

# faudio_install is set in launcher
swh_faudio()
{
	{ [ X"$runner" == X'wine' ] || [ X"$runner" == X'wine64' ] ; } || swh_error "${FUNCNAME[0]}: wrong value in \$runner"

	[ -d "$faudio_install/x32" ] || swh_error "${FUNCNAME[0]}: 32bit FAudio files not found." 
	{ [ X"$WINEARCH" == X"win64" ] && [ -d "$faudio_install/x64" ] ; } || swh_error "${FUNCNAME[0]}: 64bit FAudio files not found"

	case "$WINEARCH" in
		win32)
			for f in "$faudio_install"/x32/*.dll; do
				\cp -rfv "$f" "$WINEPREFIX/drive_c/windows/system32"
			done
			;;
		win64)
			for f in "$faudio_install"/x32/*.dll; do
				\cp -rfv "$f" "$WINEPREFIX/drive_c/windows/syswow64"
			done
			for f in "$faudio_install"/x64/*.dll; do
				\cp -rfv "$f" "$WINEPREFIX/drive_c/windows/system32"
			done
			;;
		*)
			swh_error "${FUNCNAME[0]}: wrong value in \$WINEARCH"
			;;
	esac

	readarray -t ar<<<"$( find "$faudio_install/x32" -mindepth 1 -maxdepth 1 -type f -name '*.dll' -print | sort | sed -En 's/^.*\///g; s/\.dll$//gp' )"
	for (( i=0; i<${#ar[@]}; i++ )); do
		"$runner" reg add 'HKEY_CURRENT_USER\Software\Wine\DllOverrides' /v "${ar[i]}" /d native /f
	done
}

swh_objdump()
{
	
	if (( $# == 1 )); then
		case "$1" in
			[1-9] | [1-9][0-9])
				i=$1
				local wpath
				local ldrv
				local ldf
				local lfpath
				wpath="${dir[i]}\\${exe[i]}" 
				ldrv="$( echo "$wpath" | cut -d : -f 1 | tr '[:upper:]' '[:lower:]' )"
				ldf="$( echo "$wpath" | cut -d : -f 2- | tr $'\\' '/' )"
				lfpath="$WINEPREFIX"/dosdevices/"$ldrv":"$ldf"
				[ -f "$lfpath" ] || swh_error "file not found"
				printf "\nThis function use linux command \`file\` and \`objdump -p\` scan ${exe[i]} , help you decide proper WINEARCH and dll override\n\n"
				printf "\n"
				file "$lfpath"
				printf "\n"
				objdump -p "$lfpath" | grep "DLL Name" | sort | sed -En 's/[[:blank:]]*DLL Name: //gp'
				unset wpath
				unset ldrv
				unset ldf
				unset lfpath
				;;
			*)
				swh_error "wrong arguement"
				;;
		esac
	else
		swh_error "wrong arguement count"
	fi
}

swh_help()
{
	cat <<__EOF__
Simple Wine Helper $SWH_VERSION

Usage: APP_LAUNCHER COMMAND [arguement]

Commands:
s                           Store wine to your cellar dir
c                           Run winecfg, Create wineprefix
cc                          [VIOLATE BUG REPORTING TERM!] Same as c, also remove symbolic link z: your root dir will not visable by wine programs. Don't use this command if you are using production software
i                           Inherit old profile files, useful when upgrading from old frefixes: copy these dirs from one old prefix to current prefix: 'C:\users\USERNAME\AppData' 'C:\users\USERNAME\Application Data' 'C:\users\USERNAME\Local Settings'
cdd                         Use after c or cc, create shared drive D: files in this dir is visable by all wine prefixes (default path: '\$HOME/swh/drives/drive_d')
cde                         Use after c or cc, create pirvate drive E: files in this dir is visable by this wine prefix only (default path: '\$HOME/swh/drives/\$prefix/drive_e')
r [registry file]           Run regedit [regfile]
l [application]             Launch specified application: see Examples below
1                           Launch 1st application
2                           Launch 2nd application
99                          Launch 99th application, swh now supports up to 99 apps in one launcher!
w [winetricks command]      winetricks command
ww [swh command]            swh command, these commands need winetricks as dependency, but they are NOT winetricks command
  ww cnfonts                    (EXPERIMENTIAL FUNCTION) use source fonts to replace chinese fonts
  ww d3dcompiler_42             install d3dcompiler_42, 32bit and 64bit
  ww xact                       install xact full suit, 32bit and 64bit
  ww dotnet40                   (EXPERIMENTIAL FUNCTION) extract dotnet40 files only, on 64bit prefix
  ww dotnet472                  (EXPERIMENTIAL FUNCTION) extract dotnet472 files only, on 64bit prefix. use this after using ww dotnet40
oldvk                       Setup DXVK 0.5x, 0.6x
vk                          Setup DXVK 0.7x, 0.8x, 0.9x
faudio                      Setup FAudio, see comment in launcher
cleanopenwith | cow         Clean the Open With List
NO ARGUEMENT                Show a small menu

Examples:
  APP_LAUNCHER l 'C:\a b\xy.exe'    Run specified application
  APP_LAUNCHER l cmd                Run wine cmd
  APP_LAUNCHER w d3dcompiler_47     This is a winetricks command, it installs d3dcompiler_47 override
  APP_LAUNCHER ww d3dcompiler_42    This is a swh command, it installs d3dcompiler_42 override

Quick Guide:
1. Install wine into a SEPERATE directory:
  Use official winehq repository:
    wine should be installed in directory like: '/opt/wine-stable', '/opt/wine-devel', '/opt/wine-staging'
    Your distro may install their wine package into non-seperate dir like /usr/bin , this is not supported
  Build wine yourself:
    modify wine's configure arguement: configure --prefix="SEPERATE_INSTALL_DIR"
    copy your built wine to \$cellar (default location is '\$HOME/swh/cellar')
    valid winecfg path example: '$HOME/swh/cellar/win64/4.0-rc6-staging/bin/winecfg'
  This directory should contain these dirs: bin lib lib64
2. Install swh and winetricks, perferred dir is '\$HOME/bin', modify your .bashrc file add it to '\$PATH'
3. Make a copy of example_launcher. Rename it and modify settings
5. Store wine into your cellar dir: APP_LAUNCHER s
6. Create wineprefix: APP_LAUNCHER c
7A. Wine configuration example for steam users:
  [Drives] -> [Add] -> [Select Drive Letter] -> [D:] -> [OK] -> [Browse] -> "/home/USERNAME/swh/drives/drive_d/"
  swh command cdd will also do this work.
  Put SteamSetup.exe in that dir, drive D: 
  make a copy of example_launcher and modify it's content:
    modify \$prefix as comment suggest
    modify \$build as comment suggest
    modify \$install as comment suggest
    modify \$WINEARCH  as comment suggest
    dir[1]='D:\'
    exe[1]='SteamSetup.exe'
  Save new file as steam_launcher, run command "chmod u+x steam_launcher" make it executable
  Use command "steam_launcher 1" to launch SteamSetup.exe
  Steam settings:
    Steam settings -> [Downloads] -> Set Default SteamLibrary Folder to D:\SteamLibrary
  Modify steam_launcher as:
    dir[2]='C:\Program Files (x86)\Steam'
    exe[2]='Steam.exe'
  Save file, use command "steam_launcher 2" to launch steam
7B. Old method: Link or copy or move windows application to wineprefix drive_c:
	path example: /home/USERNAME/swh/table/win64/4.0-rc5-staging/example/drive_c/
8. Tweak advanced settings via winetricks: APP_LAUNCHER w
9. Launch 1st application: APP_LAUNCHER 1
10. Launch 2nd application: APP_LAUNCHER 2

NOTE:
1. Using winetricks: "Select the default wineprefix" means select THIS wineprefix
2. This script is used per user, not "Install on this machine for everyone" because many command use username as arguement
__EOF__
}

#main()
#{
( uname | grep -i "Linux" >/dev/null 2>&1 ) || swh_error "This script runs on Linux!"
[ -v SWH_LAUNCHER ] || \
	{
		printf "No launcher or launcher too old, please remake launcher\n"
		swh_pause
		swh_help;
		exit 1
	}
swh_check_dependencies
swh_config
if (( $# > 0 )); then
	case "$1" in
	l)
		swh_init
		swh_checkprefix
		if (( $# != 1 )); then
			shift
			if ! [ -v invoker ]; then
				"$runner" "$@"
			else
				"$invoker" "$runner" "$@"
			fi
		else
			swh_help
		fi
		;;
	[1-9] | [1-9][0-9])
		swh_init
		swh_checkprefix
		i=$1
		if ! [ -v invoker ]; then
			if [ -z "${args[i]}" ]; then
				"$runner" start /d "${dir[i]}" "${exe[i]}"
			else
				"$runner" start /d "${dir[i]}" "${exe[i]}" "${args[i]}"
			fi
		else
			if [ -z "${args[i]}" ]; then
				"$invoker" "$runner" start /d "${dir[i]}" "${exe[i]}"
			else
				"$invoker" "$runner" start /d "${dir[i]}" "${exe[i]}" "${args[i]}"
			fi
		fi
		;;
	netv | --netfx_setupverifier)
		swh_init
		swh_checkprefix
		"$runner" netfx_setupverifier.exe
		;;
	s)
		swh_storewine
		;;
	c)
		swh_init
		wine winecfg
		;;
	cc)
		swh_init
		wine winecfg
		if [ -L "$WINEPREFIX/dosdevices/z:" ]; then
			rm "$WINEPREFIX/dosdevices/z:"
		fi
		;;
	i)
		swh_init
		declare -a ar
		if { printf "%s\n" "$prefix" | grep "-" ; }; then
			temp_var=$( printf "%s\n" "$prefix" | sed -En 's/-.*$//gp' )
		else
			temp_var="$prefix"
		fi
		readarray -t -n 40 ar<<<"$( find "$table" -mindepth 3 -maxdepth 3 -type d -name "$temp_var*" -print | grep -vx "$WINEPREFIX" )"
		# ${#ar[@]} always >= 1
		if [ -n "${ar[0]}" ]; then
			printf "\nYour current prefix is:\n%s\n\nInherit profile files from which old prefix?\n\n" "$WINEPREFIX"
			select op in "${ar[@]}" quit; do
				[ X"$op" == X'quit' ] && break
				me="$( whoami )"
				opd="$op/drive_c/users/$me"
				opf=("$opd/AppData" "$opd/Application Data" "$opd/Local Settings")
				npd="$WINEPREFIX/drive_c/users/$me"
				for (( i=0; i < ${#opf[@]}; i++ )); do
					\cp -rfv "${opf[i]}" "$npd"
				done
				break
			done
		else
			swh_error "Can not inherit: No prefix with same name found."
		fi
		unset temp_var
		;;
	cdd)
		swh_init
		mkdir -p "$drives/drive_d"
		cd "$WINEPREFIX"/dosdevices
		if ! [ -L "./d:" ]; then
			ln -s "$drives/drive_d" d:
		fi
		;;
	cde)
		swh_init
		mkdir -p "$drives/$prefix/drive_e"
		cd "$WINEPREFIX"/dosdevices
		if ! [ -L "./e:" ]; then
			ln -s "$drives/$prefix/drive_e" e:
		fi
		;;
	r | --regedit)
		swh_init
		swh_checkprefix
		if [ -f "$2" ]; then
			regedit "$2"
		else
			regedit
		fi
		;;
	w | --winetricks)
		swh_init
		swh_checkprefix
		if (( $# == 1 )); then
			winetricks
		else
			shift
			winetricks "$@"
		fi
		;;
	ww | --swhwinetricks)
		swh_init
		swh_checkprefix
		if (( $# == 2 )); then
			shift
			case "$1" in
			d3dcompiler_42)
				swh_ww_d3dcompiler_42
				;;
			dotnet40)
			#	swh_ww_dotnet40extract
				printf "experimental function disabled"
				;;
			dotnet472)
			#	swh_ww_dotnet472extract
				printf "experimental function disabled"
				;;
			xact)
				swh_ww_xact
				;;
			cnfonts)
			#	swh_ww_cnfonts
				printf "experimental function disabled"
				;;
			*)
				swh_error "unknown arguement."
				;;
			esac
		else
			swh_error "wrong arguement."
		fi
		;;
	oldvk)
		swh_init
		swh_checkprefix
		printf "installing 32bit old DXVK0.5x/0.6x...\n"
		cd "$dxvk_install"/x32
		bash setup_dxvk.sh
		if [ X"$WINEARCH" == X"win64" ]; then
			printf "installing 64bit old DXVK0.5x/0.6x...\n"
			cd "$dxvk_install"/x64
			bash setup_dxvk.sh
		fi
		;;
	vk)
		swh_init
		swh_checkprefix
		cd "$dxvk_install"
		winetricks --force setup_dxvk.verb
		;;
	faudio)
		swh_init
		swh_checkprefix
		swh_faudio
		;;
	cleanopenwith | cow)
		printf "\
\n\
Remove wine programs from your open with list?\n\
  Continue with the following commands?\n\n\
rm -f ~/.local/share/mime/packages/x-wine*\n\
rm -f ~/.local/share/mime/packages/x-wine*\n\
rm -f ~/.local/share/applications/wine-extension*\n\
rm -f ~/.local/share/icons/hicolor/*/*/application-x-wine-extension*\n\
rm -f ~/.local/share/mime/application/x-wine-extension*\n\
\n\
"
		read -r -p '(y/n)' temp_var
		{ [ X"$cow_input" == X'Y' ] || [ X"$cow_input" == X'y' ] ; } && \
			{
				\rm -f ~/.local/share/mime/packages/x-wine*;
				\rm -f ~/.local/share/applications/wine-extension*;
				\rm -f ~/.local/share/icons/hicolor/*/*/application-x-wine-extension*;
				\rm -f ~/.local/share/mime/application/x-wine-extension*;
			}
		unset temp_var
		;;
	objdump | od)
		swh_init
		swh_checkprefix
		swh_objdump "$2"
		;;
	h | -h | --help)
		swh_help
		;;
	--version)
		printf "swh-%s\n" "$SWH_VERSION"
		;;
	*)
		swh_error "unknown command"
		;;
	esac
else
	#run launcher without arguement will show menu
	swh_init
	swh_checkprefix
	select item in "${exe[@]}" help quit; do
		i=$REPLY
		if [ X"$item" == X"help" ]; then
			swh_help
			break
		fi
		if [ X"$item" == X"quit" ]; then
			break
		fi
		if ! [ -v invoker ]; then
			if [ -z "${args[i]}" ]; then
				"$runner" start /d "${dir[i]}" "${exe[i]}"
			else
				"$runner" start /d "${dir[i]}" "${exe[i]}" "${args[i]}"
			fi
		else
			if [ -z "${args[i]}" ]; then
				"$invoker" "$runner" start /d "${dir[i]}" "${exe[i]}"
			else
				"$invoker" "$runner" start /d "${dir[i]}" "${exe[i]}" "${args[i]}"
			fi
		fi
		break;
	done
fi
#}
